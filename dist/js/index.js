!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!b[e]||!y[e])return;for(var n in y[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(h[n]=t[n]);0==--g&&0===v&&$()}(e,n),t&&t(e,n)};var n,r=!0,o="9a59b35aa0c6c0bda379",i=1e4,s={},a=[],c=[];function d(e){var t=O[e];if(!t)return I;var r=function(r){return t.hot.active?(O[r]?-1===O[r].parents.indexOf(e)&&O[r].parents.push(e):(a=[e],n=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),a=[]),I(r)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return I[e]},set:function(t){I[e]=t}}};for(var i in I)Object.prototype.hasOwnProperty.call(I,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(r,i,o(i));return r.e=function(e){return"ready"===p&&u("prepare"),v++,I.e(e).then(t,function(e){throw t(),e});function t(){v--,"prepare"===p&&(w[e]||D(e),0===v&&0===g&&$())}},r.t=function(e,t){return 1&t&&(e=r(e)),I.t(e,-2&t)},r}var l=[],p="idle";function u(e){p=e;for(var t=0;t<l.length;t++)l[t].call(null,e)}var f,h,m,g=0,v=0,w={},y={},b={};function x(e){return+e+""===e?+e:e}function j(e){if("idle"!==p)throw new Error("check() is only allowed in idle status");return r=e,u("check"),function(e){return e=e||1e4,new Promise(function(t,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,i=I.p+""+o+".hot-update.json";r.open("GET",i,!0),r.timeout=e,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+i+" timed out."));else if(404===r.status)t();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+i+" failed."));else{try{var e=JSON.parse(r.responseText)}catch(e){return void n(e)}t(e)}}})}(i).then(function(e){if(!e)return u("idle"),null;y={},w={},b=e.c,m=e.h,u("prepare");var t=new Promise(function(e,t){f={resolve:e,reject:t}});h={};return D(1),"prepare"===p&&0===v&&0===g&&$(),t})}function D(e){b[e]?(y[e]=!0,g++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=I.p+""+e+"."+o+".hot-update.js",t.appendChild(n)}(e)):w[e]=!0}function $(){u("ready");var e=f;if(f=null,e)if(r)Promise.resolve().then(function(){return k(r)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in h)Object.prototype.hasOwnProperty.call(h,n)&&t.push(x(n));e.resolve(t)}}function k(t){if("ready"!==p)throw new Error("apply() is only allowed in ready status");var n,r,i,c,d;function l(e){for(var t=[e],n={},r=t.slice().map(function(e){return{chain:[e],id:e}});r.length>0;){var o=r.pop(),i=o.id,s=o.chain;if((c=O[i])&&!c.hot._selfAccepted){if(c.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:i};if(c.hot._main)return{type:"unaccepted",chain:s,moduleId:i};for(var a=0;a<c.parents.length;a++){var d=c.parents[a],l=O[d];if(l){if(l.hot._declinedDependencies[i])return{type:"declined",chain:s.concat([d]),moduleId:i,parentId:d};-1===t.indexOf(d)&&(l.hot._acceptedDependencies[i]?(n[d]||(n[d]=[]),f(n[d],[i])):(delete n[d],t.push(d),r.push({chain:s.concat([d]),id:d})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}t=t||{};var g={},v=[],w={},y=function(){console.warn("[HMR] unexpected require("+D.moduleId+") to disposed module")};for(var j in h)if(Object.prototype.hasOwnProperty.call(h,j)){var D;d=x(j);var $=!1,k=!1,_=!1,E="";switch((D=h[j]?l(d):{type:"disposed",moduleId:j}).chain&&(E="\nUpdate propagation: "+D.chain.join(" -> ")),D.type){case"self-declined":t.onDeclined&&t.onDeclined(D),t.ignoreDeclined||($=new Error("Aborted because of self decline: "+D.moduleId+E));break;case"declined":t.onDeclined&&t.onDeclined(D),t.ignoreDeclined||($=new Error("Aborted because of declined dependency: "+D.moduleId+" in "+D.parentId+E));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(D),t.ignoreUnaccepted||($=new Error("Aborted because "+d+" is not accepted"+E));break;case"accepted":t.onAccepted&&t.onAccepted(D),k=!0;break;case"disposed":t.onDisposed&&t.onDisposed(D),_=!0;break;default:throw new Error("Unexception type "+D.type)}if($)return u("abort"),Promise.reject($);if(k)for(d in w[d]=h[d],f(v,D.outdatedModules),D.outdatedDependencies)Object.prototype.hasOwnProperty.call(D.outdatedDependencies,d)&&(g[d]||(g[d]=[]),f(g[d],D.outdatedDependencies[d]));_&&(f(v,[D.moduleId]),w[d]=y)}var C,M=[];for(r=0;r<v.length;r++)d=v[r],O[d]&&O[d].hot._selfAccepted&&M.push({module:d,errorHandler:O[d].hot._selfAccepted});u("dispose"),Object.keys(b).forEach(function(e){!1===b[e]&&function(e){delete installedChunks[e]}(e)});for(var T,H,P=v.slice();P.length>0;)if(d=P.pop(),c=O[d]){var S={},A=c.hot._disposeHandlers;for(i=0;i<A.length;i++)(n=A[i])(S);for(s[d]=S,c.hot.active=!1,delete O[d],delete g[d],i=0;i<c.children.length;i++){var L=O[c.children[i]];L&&((C=L.parents.indexOf(d))>=0&&L.parents.splice(C,1))}}for(d in g)if(Object.prototype.hasOwnProperty.call(g,d)&&(c=O[d]))for(H=g[d],i=0;i<H.length;i++)T=H[i],(C=c.children.indexOf(T))>=0&&c.children.splice(C,1);for(d in u("apply"),o=m,w)Object.prototype.hasOwnProperty.call(w,d)&&(e[d]=w[d]);var q=null;for(d in g)if(Object.prototype.hasOwnProperty.call(g,d)&&(c=O[d])){H=g[d];var U=[];for(r=0;r<H.length;r++)if(T=H[r],n=c.hot._acceptedDependencies[T]){if(-1!==U.indexOf(n))continue;U.push(n)}for(r=0;r<U.length;r++){n=U[r];try{n(H)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:d,dependencyId:H[r],error:e}),t.ignoreErrored||q||(q=e)}}}for(r=0;r<M.length;r++){var B=M[r];d=B.module,a=[d];try{I(d)}catch(e){if("function"==typeof B.errorHandler)try{B.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:d,error:n,originalError:e}),t.ignoreErrored||q||(q=n),q||(q=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:d,error:e}),t.ignoreErrored||q||(q=e)}}return q?(u("fail"),Promise.reject(q)):(u("idle"),new Promise(function(e){e(v)}))}var O={};function I(t){if(O[t])return O[t].exports;var r=O[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:j,apply:k,status:function(e){if(!e)return p;l.push(e)},addStatusHandler:function(e){l.push(e)},removeStatusHandler:function(e){var t=l.indexOf(e);t>=0&&l.splice(t,1)},data:s[e]};return n=void 0,t}(t),parents:(c=a,a=[],c),children:[]};return e[t].call(r.exports,r,r.exports,d(t)),r.l=!0,r.exports}I.m=e,I.c=O,I.d=function(e,t,n){I.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},I.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},I.t=function(e,t){if(1&t&&(e=I(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(I.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)I.d(n,r,function(t){return e[t]}.bind(null,r));return n},I.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return I.d(t,"a",t),t},I.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},I.p="",I.h=function(){return o},d("./src/js/index.js")(I.s="./src/js/index.js")}({"./src/css/style.scss":function(e,t){},"./src/js/index.js":function(e,t,n){"use strict";n.r(t);n("./src/css/style.scss");const r=function(){return location.origin+location.pathname};class o{constructor(){this.music={audio:{}},this.init()}init(){this.main(),this.prefix(),this.waterfallsFlow(),this.previewPic(),this.handleLike(),this.playVidoe(),this.showTip()}main(){$(".btn-upload").on("tap",e=>{e.preventDefault(),$("#filedata").trigger("click")}),$(".btn-home").on("tap",e=>{e.preventDefault(),this.page("home")}),$(".btn-rank").on("tap",e=>{e.preventDefault(),this.page("rank")}),$("#filedata").UploadImg({url:"api/picture.php?act=upload",width:"750",quality:"0.8",mixsize:"10000000",type:"image/png,image/jpg,image/jpeg,image/pjpeg,image/gif,image/bmp,image/x-png",success:function(e){1==e.code?page("index"):hint(e.msg)}})}renderPicker(){}waterfallsFlow(){const e=$("#masonry");parseInt(window.screen.width);e.masonry({itemSelector:".item",gutterWidth:0,isResizable:!0})}page(e){const t=$("#page-"+e);console.log(t),t.addClass("active").siblings(".page").removeClass("active")}showTip(){const e=$("#page-rules");$(".btn-rules").on("tap",t=>{t.preventDefault(),e.show(),setTimeout(function(){e.addClass("show")},50)}),$(".close").on("tap",t=>{e.removeClass("show").one("webkitTransitionEnd",function(){$(this).hide()})})}previewPic(){$(".preview").on("tap",".item",e=>{const t=$(e.target);if(t.hasClass("btnLike")||t.parents(".btnLike").length)return;const n=r(),o=t.closest(".preview").find(".item").map((e,t)=>{const r=$(t);return n+r.data("src")});"undefined"!=typeof wx&&wx.previewImage({current:n+t.data("src")||t.attr("src"),urls:o})})}wxJssdk(){/MicroMessenger/i.test(navigator.userAgent)&&(document.addEventListener("WeixinJSBridgeReady",function(){this.music.play("music"),this.music.play("time"),this.music.stop("time")},!1),document.addEventListener("WeixinJSBridgeReady",function(){WeixinJSBridge.call("hideToolbar")}),$.getScript("https://res.wx.qq.com/open/js/jweixin-1.0.0.js",function(){console.log("test"),wx.config({debug:!1,appId:"wx6fede0c9989aa98c",timestamp:"1513666450",nonceStr:"b5f88ccf-227a-41c9-9db3-d585ef6a933d",signature:"843f834527fc605de31303af5a5bfba97f406e1e",jsApiList:["onMenuShareTimeline","onMenuShareAppMessage","hideMenuItems"]}),wx.ready(function(){o.shareData={title:"Magical moments for Nike Direct FY19 Kick Off Day",link:r(),desc:"銆€",imgUrl:r()+"img/share.jpg?v=2",success:function(){},cancel:function(){}},wx.onMenuShareTimeline(o.shareData),wx.onMenuShareAppMessage(o.shareData),wx.hideMenuItems({menuList:["menuItem:share:qq","menuItem:share:weiboApp","menuItem:share:facebook","menuItem:share:QZone","menuItem:favorite","menuItem:copyUrl","menuItem:readMode","menuItem:openWithQQBrowser","menuItem:openWithSafari"]})}),wx.error(function(e){})}))}handleLike(){$(".preview").on("tap",".btnLike",function(e){const t=$(this).parents(".item"),n=$("#hint");if(t.hasClass("disabled"))return;t.data("id");const r={};t.addClass("disabled"),r.code=1,1==r.code?(t.find(".btnLike b").text(parseInt(t.find("b").text())+1),t.find(".btnLike i").addClass("icon-dianzanedx").removeClass("icon-dianzanx"),n.text("已点赞").show(),setTimeout(()=>{n.addClass("show-toast")},50),setTimeout(()=>{n.removeClass("show-toast").one("webkitTransitionEnd",function(){n.hide()})},1400)):2==r.code?(t.find(".btnLike b").text(parseInt(t.find("b").text())-1),t.find(".btnLike i").removeClass("icon-dianzanedx").addClass("icon-dianzanx"),n.text("已取消点赞").show(),setTimeout(()=>{n.addClass("show-toast")},50),setTimeout(()=>{n.removeClass("show-toast").one("webkitTransitionEnd",function(){n.hide()})},1400)):hint(r.msg),setTimeout(function(){t.removeClass("disabled")},300)})}playVidoe(){const e=$(".item .poster"),t=$(".item video");t.on("playing",e=>{const t=$(e.target);t.closest(".item").find(".poster").hide(),t.closest(".item").find(".pick-info").hide()}),t.on("ended",e=>{const t=$(e.target);t.closest(".item").find(".poster").show(),t.closest(".item").find(".pick-info").show()}),t.on("pause",e=>{const t=$(e.target);t.closest(".item").find(".poster").show(),t.closest(".item").find(".pick-info").show(),t.closest(".item").find(".poster i").addClass("icon-play").removeClass("icon-loading1")}),e.on("tap",e=>{e.preventDefault();const t=$(e.target),n=t.closest(".item").find("video");t.closest(".item").find(".poster i").removeClass("icon-play").addClass("icon-loading1"),n[0].play()})}prefix(){$(document).ready(function(e){$(window).on("orientationchange",function(e){$("body");180!=window.orientation&&0!=window.orientation||$(".turnBox").remove(),90!=window.orientation&&-90!=window.orientation||$("body").append('<aside class="turnBox"><img src="imgs/turn.png" class="turn"><p>请将手机调至竖屏状态，获得最佳浏览体验</p></aside>')}),$(".container").on("touchmove",function(e){if($(e.target).parents(".scroller").length||$(e.target).hasClass("scroller")){var t=$(e.target).hasClass("scroller")?$(e.target)[0]:$(e.target).parents(".scroller")[0];t.scrollHeight==t.offsetHeight&&e.preventDefault()}else e.preventDefault()}),$(".scroller").on("scroll",function(e){var t=$(e.target)[0];0==t.scrollTop?t.scrollTop=1:t.scrollTop==t.scrollHeight-t.offsetHeight&&(t.scrollTop=t.scrollTop-1)}).trigger("scroll")})}}new o}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2luZGV4LmpzIl0sIm5hbWVzIjpbInBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrIiwid2luZG93IiwiY2h1bmtJZCIsIm1vcmVNb2R1bGVzIiwiaG90QXZhaWxhYmxlRmlsZXNNYXAiLCJob3RSZXF1ZXN0ZWRGaWxlc01hcCIsIm1vZHVsZUlkIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaG90VXBkYXRlIiwiaG90V2FpdGluZ0ZpbGVzIiwiaG90Q2h1bmtzTG9hZGluZyIsImhvdFVwZGF0ZURvd25sb2FkZWQiLCJob3RBZGRVcGRhdGVDaHVuayIsImhvdEN1cnJlbnRDaGlsZE1vZHVsZSIsImhvdEFwcGx5T25VcGRhdGUiLCJob3RDdXJyZW50SGFzaCIsImhvdFJlcXVlc3RUaW1lb3V0IiwiaG90Q3VycmVudE1vZHVsZURhdGEiLCJob3RDdXJyZW50UGFyZW50cyIsImhvdEN1cnJlbnRQYXJlbnRzVGVtcCIsImhvdENyZWF0ZVJlcXVpcmUiLCJtZSIsImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZm4iLCJyZXF1ZXN0IiwiaG90IiwiYWN0aXZlIiwicGFyZW50cyIsImluZGV4T2YiLCJwdXNoIiwiY2hpbGRyZW4iLCJjb25zb2xlIiwid2FybiIsIk9iamVjdEZhY3RvcnkiLCJuYW1lIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsInNldCIsInZhbHVlIiwiZGVmaW5lUHJvcGVydHkiLCJlIiwiaG90U3RhdHVzIiwiaG90U2V0U3RhdHVzIiwidGhlbiIsImZpbmlzaENodW5rTG9hZGluZyIsImVyciIsImhvdFdhaXRpbmdGaWxlc01hcCIsImhvdEVuc3VyZVVwZGF0ZUNodW5rIiwidCIsIm1vZGUiLCJob3RTdGF0dXNIYW5kbGVycyIsIm5ld1N0YXR1cyIsImkiLCJsZW5ndGgiLCJob3REZWZlcnJlZCIsImhvdFVwZGF0ZU5ld0hhc2giLCJ0b01vZHVsZUlkIiwiaWQiLCJob3RDaGVjayIsImFwcGx5IiwiRXJyb3IiLCJyZXF1ZXN0VGltZW91dCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiWE1MSHR0cFJlcXVlc3QiLCJyZXF1ZXN0UGF0aCIsInAiLCJvcGVuIiwidGltZW91dCIsInNlbmQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwidXBkYXRlIiwiSlNPTiIsInBhcnNlIiwicmVzcG9uc2VUZXh0IiwiaG90RG93bmxvYWRNYW5pZmVzdCIsImMiLCJoIiwicHJvbWlzZSIsImhlYWQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic2NyaXB0IiwiY3JlYXRlRWxlbWVudCIsImNoYXJzZXQiLCJzcmMiLCJhcHBlbmRDaGlsZCIsImhvdERvd25sb2FkVXBkYXRlQ2h1bmsiLCJkZWZlcnJlZCIsImhvdEFwcGx5IiwicmVzdWx0Iiwib3V0ZGF0ZWRNb2R1bGVzIiwib3B0aW9ucyIsImNiIiwiaiIsIm1vZHVsZSIsImdldEFmZmVjdGVkU3R1ZmYiLCJ1cGRhdGVNb2R1bGVJZCIsIm91dGRhdGVkRGVwZW5kZW5jaWVzIiwicXVldWUiLCJzbGljZSIsIm1hcCIsImNoYWluIiwicXVldWVJdGVtIiwicG9wIiwiX3NlbGZBY2NlcHRlZCIsIl9zZWxmRGVjbGluZWQiLCJ0eXBlIiwiX21haW4iLCJwYXJlbnRJZCIsInBhcmVudCIsIl9kZWNsaW5lZERlcGVuZGVuY2llcyIsImNvbmNhdCIsIl9hY2NlcHRlZERlcGVuZGVuY2llcyIsImFkZEFsbFRvU2V0IiwiYSIsImIiLCJpdGVtIiwiYXBwbGllZFVwZGF0ZSIsIndhcm5VbmV4cGVjdGVkUmVxdWlyZSIsImFib3J0RXJyb3IiLCJkb0FwcGx5IiwiZG9EaXNwb3NlIiwiY2hhaW5JbmZvIiwiam9pbiIsIm9uRGVjbGluZWQiLCJpZ25vcmVEZWNsaW5lZCIsIm9uVW5hY2NlcHRlZCIsImlnbm9yZVVuYWNjZXB0ZWQiLCJvbkFjY2VwdGVkIiwib25EaXNwb3NlZCIsImlkeCIsIm91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyIsImVycm9ySGFuZGxlciIsImtleXMiLCJmb3JFYWNoIiwiaW5zdGFsbGVkQ2h1bmtzIiwiaG90RGlzcG9zZUNodW5rIiwiZGVwZW5kZW5jeSIsIm1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzIiwiZGF0YSIsImRpc3Bvc2VIYW5kbGVycyIsIl9kaXNwb3NlSGFuZGxlcnMiLCJjaGlsZCIsInNwbGljZSIsIm1vZHVsZXMiLCJlcnJvciIsImNhbGxiYWNrcyIsIm9uRXJyb3JlZCIsImRlcGVuZGVuY3lJZCIsImlnbm9yZUVycm9yZWQiLCJlcnIyIiwib3JpZ2luYWxFcnJvciIsImV4cG9ydHMiLCJsIiwiYWNjZXB0IiwiZGVwIiwiY2FsbGJhY2siLCJkZWNsaW5lIiwiZGlzcG9zZSIsImFkZERpc3Bvc2VIYW5kbGVyIiwicmVtb3ZlRGlzcG9zZUhhbmRsZXIiLCJjaGVjayIsImFkZFN0YXR1c0hhbmRsZXIiLCJyZW1vdmVTdGF0dXNIYW5kbGVyIiwidW5kZWZpbmVkIiwiaG90Q3JlYXRlTW9kdWxlIiwibSIsImQiLCJnZXR0ZXIiLCJvIiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInMiLCJnZXRVcmwiLCJsb2NhdGlvbiIsIm9yaWdpbiIsInBhdGhuYW1lIiwiQXBwIiwiW29iamVjdCBPYmplY3RdIiwidGhpcyIsIm11c2ljIiwiYXVkaW8iLCJpbml0IiwibWFpbiIsInByZWZpeCIsIndhdGVyZmFsbHNGbG93IiwicHJldmlld1BpYyIsImhhbmRsZUxpa2UiLCJwbGF5Vmlkb2UiLCJzaG93VGlwIiwiJCIsIm9uIiwicHJldmVudERlZmF1bHQiLCJ0cmlnZ2VyIiwicGFnZSIsIlVwbG9hZEltZyIsInVybCIsIndpZHRoIiwicXVhbGl0eSIsIm1peHNpemUiLCJzdWNjZXNzIiwicmVzIiwiY29kZSIsImhpbnQiLCJtc2ciLCIkY29udGFpbmVyIiwicGFyc2VJbnQiLCJzY3JlZW4iLCJtYXNvbnJ5IiwiaXRlbVNlbGVjdG9yIiwiZ3V0dGVyV2lkdGgiLCJpc1Jlc2l6YWJsZSIsIiRhY3RpdmVQYWdlIiwibG9nIiwiYWRkQ2xhc3MiLCJzaWJsaW5ncyIsInJlbW92ZUNsYXNzIiwiJHRpcHMiLCJzaG93Iiwic2V0VGltZW91dCIsIm9uZSIsImhpZGUiLCIkdGFyZ2V0IiwidGFyZ2V0IiwiaGFzQ2xhc3MiLCJpbWdzIiwiY2xvc2VzdCIsImZpbmQiLCIkY3VycmVudCIsInd4IiwicHJldmlld0ltYWdlIiwiY3VycmVudCIsImF0dHIiLCJ1cmxzIiwidGVzdCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJwbGF5Iiwic3RvcCIsIldlaXhpbkpTQnJpZGdlIiwiZ2V0U2NyaXB0IiwiY29uZmlnIiwiZGVidWciLCJhcHBJZCIsInRpbWVzdGFtcCIsIm5vbmNlU3RyIiwic2lnbmF0dXJlIiwianNBcGlMaXN0IiwicmVhZHkiLCJzaGFyZURhdGEiLCJ0aXRsZSIsImxpbmsiLCJkZXNjIiwiaW1nVXJsIiwiY2FuY2VsIiwib25NZW51U2hhcmVUaW1lbGluZSIsIm9uTWVudVNoYXJlQXBwTWVzc2FnZSIsImhpZGVNZW51SXRlbXMiLCJtZW51TGlzdCIsIl90aGlzIiwiJGhpbnQiLCJ0ZXh0IiwiJHBsYXlCdG4iLCIkdmlkZW9zIiwiJHBhcmVudEl0ZW0iLCJvcmllbnRhdGlvbiIsInJlbW92ZSIsImFwcGVuZCIsIl9maXgiLCJzY3JvbGxIZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJzY3JvbGxUb3AiXSwibWFwcGluZ3MiOiJhQUdBLElBQUFBLEVBQUFDLE9BQUEsaUJBQ0FBLE9BQUEsaUJBQ0EsU0FBQUMsRUFBQUMsSUFpUkEsU0FBQUQsRUFBQUMsR0FDQSxJQUFBQyxFQUFBRixLQUFBRyxFQUFBSCxHQUNBLE9BRUEsUUFB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QUEyUixhQUFBLEdBQUEzUixPQUFBMlIsYUFDQTVFLEVBQUEsWUFBQTZFLFNBRUEsSUFBQTVSLE9BQUEyUixjQUFBLElBQUEzUixPQUFBMlIsYUFDQTVFLEVBQUEsUUFBQThFLE9BQUEscUdBR0E5RSxFQUFBLGNBQUFDLEdBQUEscUJBQUFwSyxHQUVBLEdBREFtSyxFQUFBbkssRUFBQW9NLFFBQUFsTixRQUFBLGFBQUEyQixRQUFBc0osRUFBQW5LLEVBQUFvTSxRQUFBQyxTQUFBLFlBRUEsQ0FDQSxJQUFBNkMsRUFBQS9FLEVBQUFuSyxFQUFBb00sUUFBQUMsU0FBQSxZQUFBbEMsRUFBQW5LLEVBQUFvTSxRQUFBLEdBQUFqQyxFQUFBbkssRUFBQW9NLFFBQUFsTixRQUFBLGdCQUNBZ1EsRUFBQUMsY0FBQUQsRUFBQUUsY0FBQXBQLEVBQUFxSyxzQkFIQXJLLEVBQUFxSyxtQkFNQUYsRUFBQSxhQUFBQyxHQUFBLGtCQUFBcEssR0FDQSxJQUFBeU8sRUFBQXRFLEVBQUFuSyxFQUFBb00sUUFBQSxHQUNBLEdBQUFxQyxFQUFBWSxVQUNBWixFQUFBWSxVQUFBLEVBQ1NaLEVBQUFZLFdBQUFaLEVBQUFVLGFBQUFWLEVBQUFXLGVBQ1RYLEVBQUFZLFVBQUFaLEVBQUFZLFVBQUEsS0FFTy9FLFFBQUEsYUFNUCxJQUFBaEIiLCJmaWxlIjoianMvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHRmdW5jdGlvbiBob3REaXNwb3NlQ2h1bmsoY2h1bmtJZCkge1xuIFx0XHRkZWxldGUgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuIFx0fVxuIFx0dmFyIHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrID0gd2luZG93W1wid2VicGFja0hvdFVwZGF0ZVwiXTtcbiBcdHdpbmRvd1tcIndlYnBhY2tIb3RVcGRhdGVcIl0gPSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIHdlYnBhY2tIb3RVcGRhdGVDYWxsYmFjayhjaHVua0lkLCBtb3JlTW9kdWxlcykge1xuIFx0XHRob3RBZGRVcGRhdGVDaHVuayhjaHVua0lkLCBtb3JlTW9kdWxlcyk7XG4gXHRcdGlmIChwYXJlbnRIb3RVcGRhdGVDYWxsYmFjaykgcGFyZW50SG90VXBkYXRlQ2FsbGJhY2soY2h1bmtJZCwgbW9yZU1vZHVsZXMpO1xuIFx0fSA7XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90RG93bmxvYWRVcGRhdGVDaHVuayhjaHVua0lkKSB7XG4gXHRcdHZhciBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdO1xuIFx0XHR2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiBcdFx0c2NyaXB0LmNoYXJzZXQgPSBcInV0Zi04XCI7XG4gXHRcdHNjcmlwdC5zcmMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcIlwiICsgY2h1bmtJZCArIFwiLlwiICsgaG90Q3VycmVudEhhc2ggKyBcIi5ob3QtdXBkYXRlLmpzXCI7XG4gXHRcdDtcbiBcdFx0aGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuIFx0fVxuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdERvd25sb2FkTWFuaWZlc3QocmVxdWVzdFRpbWVvdXQpIHtcbiBcdFx0cmVxdWVzdFRpbWVvdXQgPSByZXF1ZXN0VGltZW91dCB8fCAxMDAwMDtcbiBcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuIFx0XHRcdGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgPT09IFwidW5kZWZpbmVkXCIpIHtcbiBcdFx0XHRcdHJldHVybiByZWplY3QobmV3IEVycm9yKFwiTm8gYnJvd3NlciBzdXBwb3J0XCIpKTtcbiBcdFx0XHR9XG4gXHRcdFx0dHJ5IHtcbiBcdFx0XHRcdHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gXHRcdFx0XHR2YXIgcmVxdWVzdFBhdGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcIlwiICsgaG90Q3VycmVudEhhc2ggKyBcIi5ob3QtdXBkYXRlLmpzb25cIjtcbiBcdFx0XHRcdHJlcXVlc3Qub3BlbihcIkdFVFwiLCByZXF1ZXN0UGF0aCwgdHJ1ZSk7XG4gXHRcdFx0XHRyZXF1ZXN0LnRpbWVvdXQgPSByZXF1ZXN0VGltZW91dDtcbiBcdFx0XHRcdHJlcXVlc3Quc2VuZChudWxsKTtcbiBcdFx0XHR9IGNhdGNoIChlcnIpIHtcbiBcdFx0XHRcdHJldHVybiByZWplY3QoZXJyKTtcbiBcdFx0XHR9XG4gXHRcdFx0cmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiBcdFx0XHRcdGlmIChyZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHJldHVybjtcbiBcdFx0XHRcdGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCkge1xuIFx0XHRcdFx0XHQvLyB0aW1lb3V0XG4gXHRcdFx0XHRcdHJlamVjdChcbiBcdFx0XHRcdFx0XHRuZXcgRXJyb3IoXCJNYW5pZmVzdCByZXF1ZXN0IHRvIFwiICsgcmVxdWVzdFBhdGggKyBcIiB0aW1lZCBvdXQuXCIpXG4gXHRcdFx0XHRcdCk7XG4gXHRcdFx0XHR9IGVsc2UgaWYgKHJlcXVlc3Quc3RhdHVzID09PSA0MDQpIHtcbiBcdFx0XHRcdFx0Ly8gbm8gdXBkYXRlIGF2YWlsYWJsZVxuIFx0XHRcdFx0XHRyZXNvbHZlKCk7XG4gXHRcdFx0XHR9IGVsc2UgaWYgKHJlcXVlc3Quc3RhdHVzICE9PSAyMDAgJiYgcmVxdWVzdC5zdGF0dXMgIT09IDMwNCkge1xuIFx0XHRcdFx0XHQvLyBvdGhlciBmYWlsdXJlXG4gXHRcdFx0XHRcdHJlamVjdChuZXcgRXJyb3IoXCJNYW5pZmVzdCByZXF1ZXN0IHRvIFwiICsgcmVxdWVzdFBhdGggKyBcIiBmYWlsZWQuXCIpKTtcbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdC8vIHN1Y2Nlc3NcbiBcdFx0XHRcdFx0dHJ5IHtcbiBcdFx0XHRcdFx0XHR2YXIgdXBkYXRlID0gSlNPTi5wYXJzZShyZXF1ZXN0LnJlc3BvbnNlVGV4dCk7XG4gXHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHtcbiBcdFx0XHRcdFx0XHRyZWplY3QoZSk7XG4gXHRcdFx0XHRcdFx0cmV0dXJuO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdHJlc29sdmUodXBkYXRlKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9O1xuIFx0XHR9KTtcbiBcdH1cblxuIFx0dmFyIGhvdEFwcGx5T25VcGRhdGUgPSB0cnVlO1xuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHR2YXIgaG90Q3VycmVudEhhc2ggPSBcIjlhNTliMzVhYTBjNmMwYmRhMzc5XCI7XG4gXHR2YXIgaG90UmVxdWVzdFRpbWVvdXQgPSAxMDAwMDtcbiBcdHZhciBob3RDdXJyZW50TW9kdWxlRGF0YSA9IHt9O1xuIFx0dmFyIGhvdEN1cnJlbnRDaGlsZE1vZHVsZTtcbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0dmFyIGhvdEN1cnJlbnRQYXJlbnRzID0gW107XG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdHZhciBob3RDdXJyZW50UGFyZW50c1RlbXAgPSBbXTtcblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3RDcmVhdGVSZXF1aXJlKG1vZHVsZUlkKSB7XG4gXHRcdHZhciBtZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRpZiAoIW1lKSByZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXztcbiBcdFx0dmFyIGZuID0gZnVuY3Rpb24ocmVxdWVzdCkge1xuIFx0XHRcdGlmIChtZS5ob3QuYWN0aXZlKSB7XG4gXHRcdFx0XHRpZiAoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XSkge1xuIFx0XHRcdFx0XHRpZiAoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpID09PSAtMSkge1xuIFx0XHRcdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cy5wdXNoKG1vZHVsZUlkKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHRob3RDdXJyZW50Q2hpbGRNb2R1bGUgPSByZXF1ZXN0O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKG1lLmNoaWxkcmVuLmluZGV4T2YocmVxdWVzdCkgPT09IC0xKSB7XG4gXHRcdFx0XHRcdG1lLmNoaWxkcmVuLnB1c2gocmVxdWVzdCk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdGNvbnNvbGUud2FybihcbiBcdFx0XHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgK1xuIFx0XHRcdFx0XHRcdHJlcXVlc3QgK1xuIFx0XHRcdFx0XHRcdFwiKSBmcm9tIGRpc3Bvc2VkIG1vZHVsZSBcIiArXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWRcbiBcdFx0XHRcdCk7XG4gXHRcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFtdO1xuIFx0XHRcdH1cbiBcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhyZXF1ZXN0KTtcbiBcdFx0fTtcbiBcdFx0dmFyIE9iamVjdEZhY3RvcnkgPSBmdW5jdGlvbiBPYmplY3RGYWN0b3J5KG5hbWUpIHtcbiBcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG4gXHRcdFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fW25hbWVdO1xuIFx0XHRcdFx0fSxcbiBcdFx0XHRcdHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiBcdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfX1tuYW1lXSA9IHZhbHVlO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH07XG4gXHRcdH07XG4gXHRcdGZvciAodmFyIG5hbWUgaW4gX193ZWJwYWNrX3JlcXVpcmVfXykge1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfX3dlYnBhY2tfcmVxdWlyZV9fLCBuYW1lKSAmJlxuIFx0XHRcdFx0bmFtZSAhPT0gXCJlXCIgJiZcbiBcdFx0XHRcdG5hbWUgIT09IFwidFwiXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIG5hbWUsIE9iamVjdEZhY3RvcnkobmFtZSkpO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRmbi5lID0gZnVuY3Rpb24oY2h1bmtJZCkge1xuIFx0XHRcdGlmIChob3RTdGF0dXMgPT09IFwicmVhZHlcIikgaG90U2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcbiBcdFx0XHRob3RDaHVua3NMb2FkaW5nKys7XG4gXHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uZShjaHVua0lkKS50aGVuKGZpbmlzaENodW5rTG9hZGluZywgZnVuY3Rpb24oZXJyKSB7XG4gXHRcdFx0XHRmaW5pc2hDaHVua0xvYWRpbmcoKTtcbiBcdFx0XHRcdHRocm93IGVycjtcbiBcdFx0XHR9KTtcblxuIFx0XHRcdGZ1bmN0aW9uIGZpbmlzaENodW5rTG9hZGluZygpIHtcbiBcdFx0XHRcdGhvdENodW5rc0xvYWRpbmctLTtcbiBcdFx0XHRcdGlmIChob3RTdGF0dXMgPT09IFwicHJlcGFyZVwiKSB7XG4gXHRcdFx0XHRcdGlmICghaG90V2FpdGluZ0ZpbGVzTWFwW2NodW5rSWRdKSB7XG4gXHRcdFx0XHRcdFx0aG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0aWYgKGhvdENodW5rc0xvYWRpbmcgPT09IDAgJiYgaG90V2FpdGluZ0ZpbGVzID09PSAwKSB7XG4gXHRcdFx0XHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9O1xuIFx0XHRmbi50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0XHRpZiAobW9kZSAmIDEpIHZhbHVlID0gZm4odmFsdWUpO1xuIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLnQodmFsdWUsIG1vZGUgJiB+MSk7XG4gXHRcdH07XG4gXHRcdHJldHVybiBmbjtcbiBcdH1cblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3RDcmVhdGVNb2R1bGUobW9kdWxlSWQpIHtcbiBcdFx0dmFyIGhvdCA9IHtcbiBcdFx0XHQvLyBwcml2YXRlIHN0dWZmXG4gXHRcdFx0X2FjY2VwdGVkRGVwZW5kZW5jaWVzOiB7fSxcbiBcdFx0XHRfZGVjbGluZWREZXBlbmRlbmNpZXM6IHt9LFxuIFx0XHRcdF9zZWxmQWNjZXB0ZWQ6IGZhbHNlLFxuIFx0XHRcdF9zZWxmRGVjbGluZWQ6IGZhbHNlLFxuIFx0XHRcdF9kaXNwb3NlSGFuZGxlcnM6IFtdLFxuIFx0XHRcdF9tYWluOiBob3RDdXJyZW50Q2hpbGRNb2R1bGUgIT09IG1vZHVsZUlkLFxuXG4gXHRcdFx0Ly8gTW9kdWxlIEFQSVxuIFx0XHRcdGFjdGl2ZTogdHJ1ZSxcbiBcdFx0XHRhY2NlcHQ6IGZ1bmN0aW9uKGRlcCwgY2FsbGJhY2spIHtcbiBcdFx0XHRcdGlmICh0eXBlb2YgZGVwID09PSBcInVuZGVmaW5lZFwiKSBob3QuX3NlbGZBY2NlcHRlZCA9IHRydWU7XG4gXHRcdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcImZ1bmN0aW9uXCIpIGhvdC5fc2VsZkFjY2VwdGVkID0gZGVwO1xuIFx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIilcbiBcdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspXG4gXHRcdFx0XHRcdFx0aG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBbaV1dID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24oKSB7fTtcbiBcdFx0XHRcdGVsc2UgaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBdID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24oKSB7fTtcbiBcdFx0XHR9LFxuIFx0XHRcdGRlY2xpbmU6IGZ1bmN0aW9uKGRlcCkge1xuIFx0XHRcdFx0aWYgKHR5cGVvZiBkZXAgPT09IFwidW5kZWZpbmVkXCIpIGhvdC5fc2VsZkRlY2xpbmVkID0gdHJ1ZTtcbiBcdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIpXG4gXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxuIFx0XHRcdFx0XHRcdGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IHRydWU7XG4gXHRcdFx0XHRlbHNlIGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwXSA9IHRydWU7XG4gXHRcdFx0fSxcbiBcdFx0XHRkaXNwb3NlOiBmdW5jdGlvbihjYWxsYmFjaykge1xuIFx0XHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG4gXHRcdFx0fSxcbiBcdFx0XHRhZGREaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiBcdFx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuIFx0XHRcdH0sXG4gXHRcdFx0cmVtb3ZlRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gXHRcdFx0XHR2YXIgaWR4ID0gaG90Ll9kaXNwb3NlSGFuZGxlcnMuaW5kZXhPZihjYWxsYmFjayk7XG4gXHRcdFx0XHRpZiAoaWR4ID49IDApIGhvdC5fZGlzcG9zZUhhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdH0sXG5cbiBcdFx0XHQvLyBNYW5hZ2VtZW50IEFQSVxuIFx0XHRcdGNoZWNrOiBob3RDaGVjayxcbiBcdFx0XHRhcHBseTogaG90QXBwbHksXG4gXHRcdFx0c3RhdHVzOiBmdW5jdGlvbihsKSB7XG4gXHRcdFx0XHRpZiAoIWwpIHJldHVybiBob3RTdGF0dXM7XG4gXHRcdFx0XHRob3RTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuIFx0XHRcdH0sXG4gXHRcdFx0YWRkU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24obCkge1xuIFx0XHRcdFx0aG90U3RhdHVzSGFuZGxlcnMucHVzaChsKTtcbiBcdFx0XHR9LFxuIFx0XHRcdHJlbW92ZVN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uKGwpIHtcbiBcdFx0XHRcdHZhciBpZHggPSBob3RTdGF0dXNIYW5kbGVycy5pbmRleE9mKGwpO1xuIFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBob3RTdGF0dXNIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHR9LFxuXG4gXHRcdFx0Ly9pbmhlcml0IGZyb20gcHJldmlvdXMgZGlzcG9zZSBjYWxsXG4gXHRcdFx0ZGF0YTogaG90Q3VycmVudE1vZHVsZURhdGFbbW9kdWxlSWRdXG4gXHRcdH07XG4gXHRcdGhvdEN1cnJlbnRDaGlsZE1vZHVsZSA9IHVuZGVmaW5lZDtcbiBcdFx0cmV0dXJuIGhvdDtcbiBcdH1cblxuIFx0dmFyIGhvdFN0YXR1c0hhbmRsZXJzID0gW107XG4gXHR2YXIgaG90U3RhdHVzID0gXCJpZGxlXCI7XG5cbiBcdGZ1bmN0aW9uIGhvdFNldFN0YXR1cyhuZXdTdGF0dXMpIHtcbiBcdFx0aG90U3RhdHVzID0gbmV3U3RhdHVzO1xuIFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGhvdFN0YXR1c0hhbmRsZXJzLmxlbmd0aDsgaSsrKVxuIFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzW2ldLmNhbGwobnVsbCwgbmV3U3RhdHVzKTtcbiBcdH1cblxuIFx0Ly8gd2hpbGUgZG93bmxvYWRpbmdcbiBcdHZhciBob3RXYWl0aW5nRmlsZXMgPSAwO1xuIFx0dmFyIGhvdENodW5rc0xvYWRpbmcgPSAwO1xuIFx0dmFyIGhvdFdhaXRpbmdGaWxlc01hcCA9IHt9O1xuIFx0dmFyIGhvdFJlcXVlc3RlZEZpbGVzTWFwID0ge307XG4gXHR2YXIgaG90QXZhaWxhYmxlRmlsZXNNYXAgPSB7fTtcbiBcdHZhciBob3REZWZlcnJlZDtcblxuIFx0Ly8gVGhlIHVwZGF0ZSBpbmZvXG4gXHR2YXIgaG90VXBkYXRlLCBob3RVcGRhdGVOZXdIYXNoO1xuXG4gXHRmdW5jdGlvbiB0b01vZHVsZUlkKGlkKSB7XG4gXHRcdHZhciBpc051bWJlciA9ICtpZCArIFwiXCIgPT09IGlkO1xuIFx0XHRyZXR1cm4gaXNOdW1iZXIgPyAraWQgOiBpZDtcbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90Q2hlY2soYXBwbHkpIHtcbiBcdFx0aWYgKGhvdFN0YXR1cyAhPT0gXCJpZGxlXCIpIHtcbiBcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJjaGVjaygpIGlzIG9ubHkgYWxsb3dlZCBpbiBpZGxlIHN0YXR1c1wiKTtcbiBcdFx0fVxuIFx0XHRob3RBcHBseU9uVXBkYXRlID0gYXBwbHk7XG4gXHRcdGhvdFNldFN0YXR1cyhcImNoZWNrXCIpO1xuIFx0XHRyZXR1cm4gaG90RG93bmxvYWRNYW5pZmVzdChob3RSZXF1ZXN0VGltZW91dCkudGhlbihmdW5jdGlvbih1cGRhdGUpIHtcbiBcdFx0XHRpZiAoIXVwZGF0ZSkge1xuIFx0XHRcdFx0aG90U2V0U3RhdHVzKFwiaWRsZVwiKTtcbiBcdFx0XHRcdHJldHVybiBudWxsO1xuIFx0XHRcdH1cbiBcdFx0XHRob3RSZXF1ZXN0ZWRGaWxlc01hcCA9IHt9O1xuIFx0XHRcdGhvdFdhaXRpbmdGaWxlc01hcCA9IHt9O1xuIFx0XHRcdGhvdEF2YWlsYWJsZUZpbGVzTWFwID0gdXBkYXRlLmM7XG4gXHRcdFx0aG90VXBkYXRlTmV3SGFzaCA9IHVwZGF0ZS5oO1xuXG4gXHRcdFx0aG90U2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcbiBcdFx0XHR2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuIFx0XHRcdFx0aG90RGVmZXJyZWQgPSB7XG4gXHRcdFx0XHRcdHJlc29sdmU6IHJlc29sdmUsXG4gXHRcdFx0XHRcdHJlamVjdDogcmVqZWN0XG4gXHRcdFx0XHR9O1xuIFx0XHRcdH0pO1xuIFx0XHRcdGhvdFVwZGF0ZSA9IHt9O1xuIFx0XHRcdHZhciBjaHVua0lkID0gMTtcbiBcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9uZS1ibG9ja3NcbiBcdFx0XHR7XG4gXHRcdFx0XHQvKmdsb2JhbHMgY2h1bmtJZCAqL1xuIFx0XHRcdFx0aG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdFx0fVxuIFx0XHRcdGlmIChcbiBcdFx0XHRcdGhvdFN0YXR1cyA9PT0gXCJwcmVwYXJlXCIgJiZcbiBcdFx0XHRcdGhvdENodW5rc0xvYWRpbmcgPT09IDAgJiZcbiBcdFx0XHRcdGhvdFdhaXRpbmdGaWxlcyA9PT0gMFxuIFx0XHRcdCkge1xuIFx0XHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xuIFx0XHRcdH1cbiBcdFx0XHRyZXR1cm4gcHJvbWlzZTtcbiBcdFx0fSk7XG4gXHR9XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90QWRkVXBkYXRlQ2h1bmsoY2h1bmtJZCwgbW9yZU1vZHVsZXMpIHtcbiBcdFx0aWYgKCFob3RBdmFpbGFibGVGaWxlc01hcFtjaHVua0lkXSB8fCAhaG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0pXG4gXHRcdFx0cmV0dXJuO1xuIFx0XHRob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSA9IGZhbHNlO1xuIFx0XHRmb3IgKHZhciBtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuIFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0aG90VXBkYXRlW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0aWYgKC0taG90V2FpdGluZ0ZpbGVzID09PSAwICYmIGhvdENodW5rc0xvYWRpbmcgPT09IDApIHtcbiBcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XG4gXHRcdH1cbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCkge1xuIFx0XHRpZiAoIWhvdEF2YWlsYWJsZUZpbGVzTWFwW2NodW5rSWRdKSB7XG4gXHRcdFx0aG90V2FpdGluZ0ZpbGVzTWFwW2NodW5rSWRdID0gdHJ1ZTtcbiBcdFx0fSBlbHNlIHtcbiBcdFx0XHRob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSA9IHRydWU7XG4gXHRcdFx0aG90V2FpdGluZ0ZpbGVzKys7XG4gXHRcdFx0aG90RG93bmxvYWRVcGRhdGVDaHVuayhjaHVua0lkKTtcbiBcdFx0fVxuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RVcGRhdGVEb3dubG9hZGVkKCkge1xuIFx0XHRob3RTZXRTdGF0dXMoXCJyZWFkeVwiKTtcbiBcdFx0dmFyIGRlZmVycmVkID0gaG90RGVmZXJyZWQ7XG4gXHRcdGhvdERlZmVycmVkID0gbnVsbDtcbiBcdFx0aWYgKCFkZWZlcnJlZCkgcmV0dXJuO1xuIFx0XHRpZiAoaG90QXBwbHlPblVwZGF0ZSkge1xuIFx0XHRcdC8vIFdyYXAgZGVmZXJyZWQgb2JqZWN0IGluIFByb21pc2UgdG8gbWFyayBpdCBhcyBhIHdlbGwtaGFuZGxlZCBQcm9taXNlIHRvXG4gXHRcdFx0Ly8gYXZvaWQgdHJpZ2dlcmluZyB1bmNhdWdodCBleGNlcHRpb24gd2FybmluZyBpbiBDaHJvbWUuXG4gXHRcdFx0Ly8gU2VlIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ2NTY2NlxuIFx0XHRcdFByb21pc2UucmVzb2x2ZSgpXG4gXHRcdFx0XHQudGhlbihmdW5jdGlvbigpIHtcbiBcdFx0XHRcdFx0cmV0dXJuIGhvdEFwcGx5KGhvdEFwcGx5T25VcGRhdGUpO1xuIFx0XHRcdFx0fSlcbiBcdFx0XHRcdC50aGVuKFxuIFx0XHRcdFx0XHRmdW5jdGlvbihyZXN1bHQpIHtcbiBcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdCk7XG4gXHRcdFx0XHRcdH0sXG4gXHRcdFx0XHRcdGZ1bmN0aW9uKGVycikge1xuIFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdChlcnIpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHQpO1xuIFx0XHR9IGVsc2Uge1xuIFx0XHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcbiBcdFx0XHRmb3IgKHZhciBpZCBpbiBob3RVcGRhdGUpIHtcbiBcdFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaG90VXBkYXRlLCBpZCkpIHtcbiBcdFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2godG9Nb2R1bGVJZChpZCkpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0XHRkZWZlcnJlZC5yZXNvbHZlKG91dGRhdGVkTW9kdWxlcyk7XG4gXHRcdH1cbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90QXBwbHkob3B0aW9ucykge1xuIFx0XHRpZiAoaG90U3RhdHVzICE9PSBcInJlYWR5XCIpXG4gXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiYXBwbHkoKSBpcyBvbmx5IGFsbG93ZWQgaW4gcmVhZHkgc3RhdHVzXCIpO1xuIFx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuIFx0XHR2YXIgY2I7XG4gXHRcdHZhciBpO1xuIFx0XHR2YXIgajtcbiBcdFx0dmFyIG1vZHVsZTtcbiBcdFx0dmFyIG1vZHVsZUlkO1xuXG4gXHRcdGZ1bmN0aW9uIGdldEFmZmVjdGVkU3R1ZmYodXBkYXRlTW9kdWxlSWQpIHtcbiBcdFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW3VwZGF0ZU1vZHVsZUlkXTtcbiBcdFx0XHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcblxuIFx0XHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5zbGljZSgpLm1hcChmdW5jdGlvbihpZCkge1xuIFx0XHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdFx0Y2hhaW46IFtpZF0sXG4gXHRcdFx0XHRcdGlkOiBpZFxuIFx0XHRcdFx0fTtcbiBcdFx0XHR9KTtcbiBcdFx0XHR3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuIFx0XHRcdFx0dmFyIHF1ZXVlSXRlbSA9IHF1ZXVlLnBvcCgpO1xuIFx0XHRcdFx0dmFyIG1vZHVsZUlkID0gcXVldWVJdGVtLmlkO1xuIFx0XHRcdFx0dmFyIGNoYWluID0gcXVldWVJdGVtLmNoYWluO1xuIFx0XHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRpZiAoIW1vZHVsZSB8fCBtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWQpIGNvbnRpbnVlO1xuIFx0XHRcdFx0aWYgKG1vZHVsZS5ob3QuX3NlbGZEZWNsaW5lZCkge1xuIFx0XHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1kZWNsaW5lZFwiLFxuIFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbixcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcbiBcdFx0XHRcdFx0fTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChtb2R1bGUuaG90Ll9tYWluKSB7XG4gXHRcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdFx0dHlwZTogXCJ1bmFjY2VwdGVkXCIsXG4gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuIFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtb2R1bGUucGFyZW50cy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0XHR2YXIgcGFyZW50SWQgPSBtb2R1bGUucGFyZW50c1tpXTtcbiBcdFx0XHRcdFx0dmFyIHBhcmVudCA9IGluc3RhbGxlZE1vZHVsZXNbcGFyZW50SWRdO1xuIFx0XHRcdFx0XHRpZiAoIXBhcmVudCkgY29udGludWU7XG4gXHRcdFx0XHRcdGlmIChwYXJlbnQuaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRcdFx0dHlwZTogXCJkZWNsaW5lZFwiLFxuIFx0XHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcbiBcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdHBhcmVudElkOiBwYXJlbnRJZFxuIFx0XHRcdFx0XHRcdH07XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0aWYgKG91dGRhdGVkTW9kdWxlcy5pbmRleE9mKHBhcmVudElkKSAhPT0gLTEpIGNvbnRpbnVlO1xuIFx0XHRcdFx0XHRpZiAocGFyZW50LmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0XHRcdFx0aWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0pXG4gXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0gPSBbXTtcbiBcdFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0sIFttb2R1bGVJZF0pO1xuIFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF07XG4gXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHBhcmVudElkKTtcbiBcdFx0XHRcdFx0cXVldWUucHVzaCh7XG4gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcbiBcdFx0XHRcdFx0XHRpZDogcGFyZW50SWRcbiBcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuXG4gXHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdHR5cGU6IFwiYWNjZXB0ZWRcIixcbiBcdFx0XHRcdG1vZHVsZUlkOiB1cGRhdGVNb2R1bGVJZCxcbiBcdFx0XHRcdG91dGRhdGVkTW9kdWxlczogb3V0ZGF0ZWRNb2R1bGVzLFxuIFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXM6IG91dGRhdGVkRGVwZW5kZW5jaWVzXG4gXHRcdFx0fTtcbiBcdFx0fVxuXG4gXHRcdGZ1bmN0aW9uIGFkZEFsbFRvU2V0KGEsIGIpIHtcbiBcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdHZhciBpdGVtID0gYltpXTtcbiBcdFx0XHRcdGlmIChhLmluZGV4T2YoaXRlbSkgPT09IC0xKSBhLnB1c2goaXRlbSk7XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gYXQgYmVnaW4gYWxsIHVwZGF0ZXMgbW9kdWxlcyBhcmUgb3V0ZGF0ZWRcbiBcdFx0Ly8gdGhlIFwib3V0ZGF0ZWRcIiBzdGF0dXMgY2FuIHByb3BhZ2F0ZSB0byBwYXJlbnRzIGlmIHRoZXkgZG9uJ3QgYWNjZXB0IHRoZSBjaGlsZHJlblxuIFx0XHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcbiBcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuIFx0XHR2YXIgYXBwbGllZFVwZGF0ZSA9IHt9O1xuXG4gXHRcdHZhciB3YXJuVW5leHBlY3RlZFJlcXVpcmUgPSBmdW5jdGlvbiB3YXJuVW5leHBlY3RlZFJlcXVpcmUoKSB7XG4gXHRcdFx0Y29uc29sZS53YXJuKFxuIFx0XHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgKyByZXN1bHQubW9kdWxlSWQgKyBcIikgdG8gZGlzcG9zZWQgbW9kdWxlXCJcbiBcdFx0XHQpO1xuIFx0XHR9O1xuXG4gXHRcdGZvciAodmFyIGlkIGluIGhvdFVwZGF0ZSkge1xuIFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaG90VXBkYXRlLCBpZCkpIHtcbiBcdFx0XHRcdG1vZHVsZUlkID0gdG9Nb2R1bGVJZChpZCk7XG4gXHRcdFx0XHQvKiogQHR5cGUge1RPRE99ICovXG4gXHRcdFx0XHR2YXIgcmVzdWx0O1xuIFx0XHRcdFx0aWYgKGhvdFVwZGF0ZVtpZF0pIHtcbiBcdFx0XHRcdFx0cmVzdWx0ID0gZ2V0QWZmZWN0ZWRTdHVmZihtb2R1bGVJZCk7XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHRyZXN1bHQgPSB7XG4gXHRcdFx0XHRcdFx0dHlwZTogXCJkaXNwb3NlZFwiLFxuIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBpZFxuIFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0LyoqIEB0eXBlIHtFcnJvcnxmYWxzZX0gKi9cbiBcdFx0XHRcdHZhciBhYm9ydEVycm9yID0gZmFsc2U7XG4gXHRcdFx0XHR2YXIgZG9BcHBseSA9IGZhbHNlO1xuIFx0XHRcdFx0dmFyIGRvRGlzcG9zZSA9IGZhbHNlO1xuIFx0XHRcdFx0dmFyIGNoYWluSW5mbyA9IFwiXCI7XG4gXHRcdFx0XHRpZiAocmVzdWx0LmNoYWluKSB7XG4gXHRcdFx0XHRcdGNoYWluSW5mbyA9IFwiXFxuVXBkYXRlIHByb3BhZ2F0aW9uOiBcIiArIHJlc3VsdC5jaGFpbi5qb2luKFwiIC0+IFwiKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdHN3aXRjaCAocmVzdWx0LnR5cGUpIHtcbiBcdFx0XHRcdFx0Y2FzZSBcInNlbGYtZGVjbGluZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG4gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuIFx0XHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBzZWxmIGRlY2xpbmU6IFwiICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcImRlY2xpbmVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuIFx0XHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcbiBcdFx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2YgZGVjbGluZWQgZGVwZW5kZW5jeTogXCIgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG4gXHRcdFx0XHRcdFx0XHRcdFx0XCIgaW4gXCIgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5wYXJlbnRJZCArXG4gXHRcdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG4gXHRcdFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwidW5hY2NlcHRlZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uVW5hY2NlcHRlZCkgb3B0aW9ucy5vblVuYWNjZXB0ZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlVW5hY2NlcHRlZClcbiBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG4gXHRcdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIFwiICsgbW9kdWxlSWQgKyBcIiBpcyBub3QgYWNjZXB0ZWRcIiArIGNoYWluSW5mb1xuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcImFjY2VwdGVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25BY2NlcHRlZCkgb3B0aW9ucy5vbkFjY2VwdGVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0ZG9BcHBseSA9IHRydWU7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJkaXNwb3NlZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGlzcG9zZWQpIG9wdGlvbnMub25EaXNwb3NlZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGRvRGlzcG9zZSA9IHRydWU7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGRlZmF1bHQ6XG4gXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVW5leGNlcHRpb24gdHlwZSBcIiArIHJlc3VsdC50eXBlKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChhYm9ydEVycm9yKSB7XG4gXHRcdFx0XHRcdGhvdFNldFN0YXR1cyhcImFib3J0XCIpO1xuIFx0XHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoYWJvcnRFcnJvcik7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAoZG9BcHBseSkge1xuIFx0XHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IGhvdFVwZGF0ZVttb2R1bGVJZF07XG4gXHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgcmVzdWx0Lm91dGRhdGVkTW9kdWxlcyk7XG4gXHRcdFx0XHRcdGZvciAobW9kdWxlSWQgaW4gcmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG4gXHRcdFx0XHRcdFx0aWYgKFxuIFx0XHRcdFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKFxuIFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMsXG4gXHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkXG4gXHRcdFx0XHRcdFx0XHQpXG4gXHRcdFx0XHRcdFx0KSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSlcbiBcdFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdID0gW107XG4gXHRcdFx0XHRcdFx0XHRhZGRBbGxUb1NldChcbiBcdFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdLFxuIFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdXG4gXHRcdFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKGRvRGlzcG9zZSkge1xuIFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIFtyZXN1bHQubW9kdWxlSWRdKTtcbiBcdFx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSB3YXJuVW5leHBlY3RlZFJlcXVpcmU7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gU3RvcmUgc2VsZiBhY2NlcHRlZCBvdXRkYXRlZCBtb2R1bGVzIHRvIHJlcXVpcmUgdGhlbSBsYXRlciBieSB0aGUgbW9kdWxlIHN5c3RlbVxuIFx0XHR2YXIgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzID0gW107XG4gXHRcdGZvciAoaSA9IDA7IGkgPCBvdXRkYXRlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRtb2R1bGVJZCA9IG91dGRhdGVkTW9kdWxlc1tpXTtcbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSAmJlxuIFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uaG90Ll9zZWxmQWNjZXB0ZWRcbiBcdFx0XHQpXG4gXHRcdFx0XHRvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMucHVzaCh7XG4gXHRcdFx0XHRcdG1vZHVsZTogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdGVycm9ySGFuZGxlcjogaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uaG90Ll9zZWxmQWNjZXB0ZWRcbiBcdFx0XHRcdH0pO1xuIFx0XHR9XG5cbiBcdFx0Ly8gTm93IGluIFwiZGlzcG9zZVwiIHBoYXNlXG4gXHRcdGhvdFNldFN0YXR1cyhcImRpc3Bvc2VcIik7XG4gXHRcdE9iamVjdC5rZXlzKGhvdEF2YWlsYWJsZUZpbGVzTWFwKS5mb3JFYWNoKGZ1bmN0aW9uKGNodW5rSWQpIHtcbiBcdFx0XHRpZiAoaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0gPT09IGZhbHNlKSB7XG4gXHRcdFx0XHRob3REaXNwb3NlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdFx0fVxuIFx0XHR9KTtcblxuIFx0XHR2YXIgaWR4O1xuIFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMuc2xpY2UoKTtcbiBcdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcbiBcdFx0XHRtb2R1bGVJZCA9IHF1ZXVlLnBvcCgpO1xuIFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdGlmICghbW9kdWxlKSBjb250aW51ZTtcblxuIFx0XHRcdHZhciBkYXRhID0ge307XG5cbiBcdFx0XHQvLyBDYWxsIGRpc3Bvc2UgaGFuZGxlcnNcbiBcdFx0XHR2YXIgZGlzcG9zZUhhbmRsZXJzID0gbW9kdWxlLmhvdC5fZGlzcG9zZUhhbmRsZXJzO1xuIFx0XHRcdGZvciAoaiA9IDA7IGogPCBkaXNwb3NlSGFuZGxlcnMubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdGNiID0gZGlzcG9zZUhhbmRsZXJzW2pdO1xuIFx0XHRcdFx0Y2IoZGF0YSk7XG4gXHRcdFx0fVxuIFx0XHRcdGhvdEN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXSA9IGRhdGE7XG5cbiBcdFx0XHQvLyBkaXNhYmxlIG1vZHVsZSAodGhpcyBkaXNhYmxlcyByZXF1aXJlcyBmcm9tIHRoaXMgbW9kdWxlKVxuIFx0XHRcdG1vZHVsZS5ob3QuYWN0aXZlID0gZmFsc2U7XG5cbiBcdFx0XHQvLyByZW1vdmUgbW9kdWxlIGZyb20gY2FjaGVcbiBcdFx0XHRkZWxldGUgaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG5cbiBcdFx0XHQvLyB3aGVuIGRpc3Bvc2luZyB0aGVyZSBpcyBubyBuZWVkIHRvIGNhbGwgZGlzcG9zZSBoYW5kbGVyXG4gXHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcblxuIFx0XHRcdC8vIHJlbW92ZSBcInBhcmVudHNcIiByZWZlcmVuY2VzIGZyb20gYWxsIGNoaWxkcmVuXG4gXHRcdFx0Zm9yIChqID0gMDsgaiA8IG1vZHVsZS5jaGlsZHJlbi5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0dmFyIGNoaWxkID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGUuY2hpbGRyZW5bal1dO1xuIFx0XHRcdFx0aWYgKCFjaGlsZCkgY29udGludWU7XG4gXHRcdFx0XHRpZHggPSBjaGlsZC5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpO1xuIFx0XHRcdFx0aWYgKGlkeCA+PSAwKSB7XG4gXHRcdFx0XHRcdGNoaWxkLnBhcmVudHMuc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gcmVtb3ZlIG91dGRhdGVkIGRlcGVuZGVuY3kgZnJvbSBtb2R1bGUgY2hpbGRyZW5cbiBcdFx0dmFyIGRlcGVuZGVuY3k7XG4gXHRcdHZhciBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcztcbiBcdFx0Zm9yIChtb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdGlmIChtb2R1bGUpIHtcbiBcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRcdGZvciAoaiA9IDA7IGogPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0XHRcdGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tqXTtcbiBcdFx0XHRcdFx0XHRpZHggPSBtb2R1bGUuY2hpbGRyZW4uaW5kZXhPZihkZXBlbmRlbmN5KTtcbiBcdFx0XHRcdFx0XHRpZiAoaWR4ID49IDApIG1vZHVsZS5jaGlsZHJlbi5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIE5vdCBpbiBcImFwcGx5XCIgcGhhc2VcbiBcdFx0aG90U2V0U3RhdHVzKFwiYXBwbHlcIik7XG5cbiBcdFx0aG90Q3VycmVudEhhc2ggPSBob3RVcGRhdGVOZXdIYXNoO1xuXG4gXHRcdC8vIGluc2VydCBuZXcgY29kZVxuIFx0XHRmb3IgKG1vZHVsZUlkIGluIGFwcGxpZWRVcGRhdGUpIHtcbiBcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGFwcGxpZWRVcGRhdGUsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0bW9kdWxlc1ttb2R1bGVJZF0gPSBhcHBsaWVkVXBkYXRlW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBjYWxsIGFjY2VwdCBoYW5kbGVyc1xuIFx0XHR2YXIgZXJyb3IgPSBudWxsO1xuIFx0XHRmb3IgKG1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZClcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0aWYgKG1vZHVsZSkge1xuIFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9IG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0dmFyIGNhbGxiYWNrcyA9IFtdO1xuIFx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbaV07XG4gXHRcdFx0XHRcdFx0Y2IgPSBtb2R1bGUuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBlbmRlbmN5XTtcbiBcdFx0XHRcdFx0XHRpZiAoY2IpIHtcbiBcdFx0XHRcdFx0XHRcdGlmIChjYWxsYmFja3MuaW5kZXhPZihjYikgIT09IC0xKSBjb250aW51ZTtcbiBcdFx0XHRcdFx0XHRcdGNhbGxiYWNrcy5wdXNoKGNiKTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0XHRcdGNiID0gY2FsbGJhY2tzW2ldO1xuIFx0XHRcdFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRcdFx0XHRjYihtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyk7XG4gXHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuIFx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwiYWNjZXB0LWVycm9yZWRcIixcbiBcdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeUlkOiBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tpXSxcbiBcdFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXG4gXHRcdFx0XHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gXHRcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gTG9hZCBzZWxmIGFjY2VwdGVkIG1vZHVsZXNcbiBcdFx0Zm9yIChpID0gMDsgaSA8IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdHZhciBpdGVtID0gb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzW2ldO1xuIFx0XHRcdG1vZHVsZUlkID0gaXRlbS5tb2R1bGU7XG4gXHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xuIFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKTtcbiBcdFx0XHR9IGNhdGNoIChlcnIpIHtcbiBcdFx0XHRcdGlmICh0eXBlb2YgaXRlbS5lcnJvckhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIikge1xuIFx0XHRcdFx0XHR0cnkge1xuIFx0XHRcdFx0XHRcdGl0ZW0uZXJyb3JIYW5kbGVyKGVycik7XG4gXHRcdFx0XHRcdH0gY2F0Y2ggKGVycjIpIHtcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcbiBcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvci1oYW5kbGVyLWVycm9yZWRcIixcbiBcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyMixcbiBcdFx0XHRcdFx0XHRcdFx0b3JpZ2luYWxFcnJvcjogZXJyXG4gXHRcdFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyMjtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcbiBcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3JlZFwiLFxuIFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuIFx0XHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBoYW5kbGUgZXJyb3JzIGluIGFjY2VwdCBoYW5kbGVycyBhbmQgc2VsZiBhY2NlcHRlZCBtb2R1bGUgbG9hZFxuIFx0XHRpZiAoZXJyb3IpIHtcbiBcdFx0XHRob3RTZXRTdGF0dXMoXCJmYWlsXCIpO1xuIFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gXHRcdH1cblxuIFx0XHRob3RTZXRTdGF0dXMoXCJpZGxlXCIpO1xuIFx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuIFx0XHRcdHJlc29sdmUob3V0ZGF0ZWRNb2R1bGVzKTtcbiBcdFx0fSk7XG4gXHR9XG5cbiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGhvdDogaG90Q3JlYXRlTW9kdWxlKG1vZHVsZUlkKSxcbiBcdFx0XHRwYXJlbnRzOiAoaG90Q3VycmVudFBhcmVudHNUZW1wID0gaG90Q3VycmVudFBhcmVudHMsIGhvdEN1cnJlbnRQYXJlbnRzID0gW10sIGhvdEN1cnJlbnRQYXJlbnRzVGVtcCksXG4gXHRcdFx0Y2hpbGRyZW46IFtdXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIGhvdENyZWF0ZVJlcXVpcmUobW9kdWxlSWQpKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBfX3dlYnBhY2tfaGFzaF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSBmdW5jdGlvbigpIHsgcmV0dXJuIGhvdEN1cnJlbnRIYXNoOyB9O1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIGhvdENyZWF0ZVJlcXVpcmUoXCIuL3NyYy9qcy9pbmRleC5qc1wiKShfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBcIi4vc3JjL2pzL2luZGV4LmpzXCIpO1xuIiwiLy8gaW1wb3J0IHNldEh0bWxGb250U2l6ZSBmcm9tICcuL2pzL3JlbSc7XG5pbXBvcnQgXCIuLi9jc3Mvc3R5bGUuc2Nzc1wiO1xuXG5jb25zdCBnZXRVcmwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciByb290UGF0aCA9IGxvY2F0aW9uLm9yaWdpbiArIGxvY2F0aW9uLnBhdGhuYW1lO1xuICByZXR1cm4gcm9vdFBhdGg7XG59XG5jbGFzcyBBcHAge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5tdXNpYyA9IHtcbiAgICAgIGF1ZGlvOiB7fVxuICAgIH07XG4gICAgdGhpcy5pbml0KCk7XG4gIH1cbiAgaW5pdCAoKSB7XG4gICAgLy8gc2V0SHRtbEZvbnRTaXplKCk7XG4gICAgLy8gdGhpcy53eEpzc2RrKCk7XG4gICAgdGhpcy5tYWluKCk7XG4gICAgdGhpcy5wcmVmaXgoKTtcbiAgICB0aGlzLndhdGVyZmFsbHNGbG93KCk7XG4gICAgdGhpcy5wcmV2aWV3UGljKCk7XG4gICAgdGhpcy5oYW5kbGVMaWtlKCk7XG4gICAgdGhpcy5wbGF5Vmlkb2UoKTtcbiAgICB0aGlzLnNob3dUaXAoKTtcbiAgICAvLyB0aGlzLnNjcm9sbCgnbWVzc2FnZScpO1xuICB9XG4gIG1haW4gKCkge1xuICAgICQoJy5idG4tdXBsb2FkJykub24oJ3RhcCcsIGUgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgJCgnI2ZpbGVkYXRhJykudHJpZ2dlcignY2xpY2snKTtcbiAgICB9KTtcblxuICAgICQoJy5idG4taG9tZScpLm9uKCd0YXAnLCBlID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMucGFnZSgnaG9tZScpO1xuICAgIH0pO1xuXG4gICAgJCgnLmJ0bi1yYW5rJykub24oJ3RhcCcsIGUgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhpcy5wYWdlKCdyYW5rJyk7XG4gICAgfSk7XG4gICAgLy8gJCgnLnBhZ2UtcnVsZXMnKVswXS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBmdW5jdGlvbiAoZSkgeyAgICAgLy/lr7nokpnniYjnu5Hlrpp0b3VjaG1vdmXnmoTlsZ7mgKdcbiAgICAvLyAgIC8v5Yik5pat5p2h5Lu2LOadoeS7tuaIkOeri+aJjemYu+atouiDjOaZr+mhtemdoua7muWKqCzlhbbku5bmg4XlhrXkuI3kvJrlho3lvbHlk43liLDpobXpnaLmu5rliqhcbiAgICAvLyAgIGlmICghJChlLnRhcmdldCkuaGFzQ2xhc3MoJ3Njcm9sbCcpKSB7XG4gICAgLy8gICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAvLyAgIH1cbiAgICAvLyB9KTtcblxuXG4gICAgLy8g5LiK5Lyg5Zu+54mHXG4gICAgJCgnI2ZpbGVkYXRhJykuVXBsb2FkSW1nKHtcbiAgICAgIHVybDogJ2FwaS9waWN0dXJlLnBocD9hY3Q9dXBsb2FkJyxcbiAgICAgIHdpZHRoOiAnNzUwJyxcbiAgICAgIHF1YWxpdHk6ICcwLjgnLFxuICAgICAgbWl4c2l6ZTogJzEwMDAwMDAwJyxcbiAgICAgIHR5cGU6ICdpbWFnZS9wbmcsaW1hZ2UvanBnLGltYWdlL2pwZWcsaW1hZ2UvcGpwZWcsaW1hZ2UvZ2lmLGltYWdlL2JtcCxpbWFnZS94LXBuZycsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgIGlmIChyZXMuY29kZSA9PSAxKSB7XG4gICAgICAgICAgcGFnZSgnaW5kZXgnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoaW50KHJlcy5tc2cpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZW5kZXJQaWNrZXIgKCkge1xuICAgIC8vIGNvbnN0IGRhdGEgPSBbXG4gICAgLy8gICB7XG4gICAgLy8gICAgIHBfaWQ6XG4gICAgLy8gICB9XG4gICAgLy8gXVxuICAgIC8vIGxldCB0bXBsYXRlO1xuXG4gICAgLy8gZm9yICh2YXIgaSA9IDA7IGkgPCByZXMuZGF0YS5sZW5ndGg7IGkrKykge1xuICAgIC8vICAgdGVtcGxhdGUgPSBgPGRpdiBjbGFzcz1cIml0ZW0gaXRlbS0ke2RhdGFbaV0ucF9pZH0gbWFzb25yeS1icmlja1wiIGRhdGEtaWQ9XCIke2RhdGFbaV0ucF9pZH1cIiBkYXRhLXNyYz1cIiR7ZGF0YVtpXS5wX3BpY3VybH1cIiBzdHlsZT1cInBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAxMHB4OyBsZWZ0OiAzMjBweDtcIj4gXG4gICAgLy8gICA8aW1nIHNyYz1cIiR7ZGF0YVtpXS5wX3BpY3VybH1cIj5cbiAgICAvLyAgIDxzcGFuIGNsYXNzPVwiYnRuTGlrZVwiPjxpIGNsYXNzPVwiaWNvLWxpa2VcIj48L2k+IDxiPiR7ZGF0YVtpXS5wX3ZvdGV9PC9iPjwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgLy8gICA8L2Rpdj5gO1xuICAgIC8vIH07XG4gIH1cblxuICAvLyDlm77niYfngJHluIPmtYFcbiAgd2F0ZXJmYWxsc0Zsb3cgKCkge1xuICAgIGNvbnN0ICRjb250YWluZXIgPSAkKCcjbWFzb25yeScpO1xuICAgIGNvbnN0IGltZ1dpZHRoID0gcGFyc2VJbnQod2luZG93LnNjcmVlbi53aWR0aCkgLSA0MDtcbiAgICAkY29udGFpbmVyLm1hc29ucnkoe1xuICAgICAgaXRlbVNlbGVjdG9yOiAnLml0ZW0nLFxuICAgICAgZ3V0dGVyV2lkdGg6IDAsXG4gICAgICBpc1Jlc2l6YWJsZTogdHJ1ZSxcbiAgICB9KTtcbiAgfVxuICAvLyDliIfmjaLpobXpnaJcbiAgcGFnZSAoYWN0aXZlKSB7XG4gICAgY29uc3QgJGFjdGl2ZVBhZ2UgPSAkKFwiI3BhZ2UtXCIgKyBhY3RpdmUpO1xuICAgIGNvbnNvbGUubG9nKCRhY3RpdmVQYWdlKTtcbiAgICBcbiAgICAkYWN0aXZlUGFnZS5hZGRDbGFzcyhcImFjdGl2ZVwiKS5zaWJsaW5ncyhcIi5wYWdlXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xuICB9XG5cblxuICAvLyDmmL7npLrlkozpmpDol4/mj5DnpLpcbiAgc2hvd1RpcCgpIHtcbiAgICBjb25zdCAkdGlwcyA9ICQoJyNwYWdlLXJ1bGVzJyk7XG4gICAgJCgnLmJ0bi1ydWxlcycpLm9uKCd0YXAnLCBlID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICR0aXBzLnNob3coKTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAkdGlwcy5hZGRDbGFzcygnc2hvdycpO1xuICAgICAgfSwgNTApO1xuICAgIH0pO1xuICAgICQoJy5jbG9zZScpLm9uKCd0YXAnLCBlID0+IHtcbiAgICAgICR0aXBzLnJlbW92ZUNsYXNzKCdzaG93Jykub25lKCd3ZWJraXRUcmFuc2l0aW9uRW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAkKHRoaXMpLmhpZGUoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLy8g54K55Ye75p+l55yL5aSn5Zu+XG4gIHByZXZpZXdQaWMgKCkge1xuICAgICQoJy5wcmV2aWV3Jykub24oJ3RhcCcsICcuaXRlbScsIChlKSA9PiB7XG4gICAgICBjb25zdCAkdGFyZ2V0ID0gJChlLnRhcmdldCk7XG4gICAgICBpZiAoJHRhcmdldC5oYXNDbGFzcygnYnRuTGlrZScpIHx8ICR0YXJnZXQucGFyZW50cygnLmJ0bkxpa2UnKS5sZW5ndGgpIHJldHVybjtcbiAgICAgIGNvbnN0IHVybCA9IGdldFVybCgpO1xuICAgICAgXG4gICAgICBjb25zdCBpbWdzID0gJHRhcmdldC5jbG9zZXN0KCcucHJldmlldycpLmZpbmQoJy5pdGVtJykubWFwKChpZHgsaXRlbSkgPT4ge1xuICAgICAgICBjb25zdCAkY3VycmVudCA9ICQoaXRlbSk7XG4gICAgICAgIHJldHVybiB1cmwgKyAkY3VycmVudC5kYXRhKCdzcmMnKTtcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBpZiAodHlwZW9mIHd4ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3eC5wcmV2aWV3SW1hZ2Uoe1xuICAgICAgICAgIGN1cnJlbnQ6IHVybCArICR0YXJnZXQuZGF0YSgnc3JjJykgfHwgJHRhcmdldC5hdHRyKCdzcmMnKSxcbiAgICAgICAgICB1cmxzOiBpbWdzXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgd3hKc3NkayAoKSB7XG4gICAgaWYgKC9NaWNyb01lc3Nlbmdlci9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJXZWl4aW5KU0JyaWRnZVJlYWR5XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5tdXNpYy5wbGF5KCdtdXNpYycpO1xuICAgICAgICB0aGlzLm11c2ljLnBsYXkoJ3RpbWUnKTtcbiAgICAgICAgdGhpcy5tdXNpYy5zdG9wKCd0aW1lJyk7XG4gICAgICB9LCBmYWxzZSk7XG5cbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ1dlaXhpbkpTQnJpZGdlUmVhZHknLCBmdW5jdGlvbiBvbkJyaWRnZVJlYWR5KCkge1xuICAgICAgICBXZWl4aW5KU0JyaWRnZS5jYWxsKCdoaWRlVG9vbGJhcicpO1xuICAgICAgfSk7XG5cblxuICAgICAgJC5nZXRTY3JpcHQoXCJodHRwczovL3Jlcy53eC5xcS5jb20vb3Blbi9qcy9qd2VpeGluLTEuMC4wLmpzXCIsIGZ1bmN0aW9uIGNhbGxiYWNrKCkge1xuICAgICAgICBjb25zb2xlLmxvZygndGVzdCcpO1xuICAgICAgICBcbiAgICAgICAgLy8gJC5hamF4KHtcbiAgICAgICAgLy8gICB0eXBlOiBcInBvc3RcIixcbiAgICAgICAgLy8gICB1cmw6IFwiYXBpL2pzc2RrLnBocFwiLFxuICAgICAgICAvLyAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgIC8vICAgZGF0YToge1xuICAgICAgICAvLyAgICAgdXJsOiB3aW5kb3cubG9jYXRpb24uaHJlZi5zcGxpdCgnIycpWzBdXG4gICAgICAgIC8vICAgfSxcbiAgICAgICAgLy8gICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAvLyAgICAgd3guY29uZmlnKHtcbiAgICAgICAgLy8gICAgICAgZGVidWc6IGZhbHNlLFxuICAgICAgICAvLyAgICAgICBhcHBJZDogZGF0YS5hcHBpZCxcbiAgICAgICAgLy8gICAgICAgdGltZXN0YW1wOiBkYXRhLnRpbWVzdGFtcCxcbiAgICAgICAgLy8gICAgICAgbm9uY2VTdHI6IGRhdGEubm9uY2VzdHIsXG4gICAgICAgIC8vICAgICAgIHNpZ25hdHVyZTogZGF0YS5zaWduYXR1cmUsXG4gICAgICAgIC8vICAgICAgIGpzQXBpTGlzdDogW1xuICAgICAgICAvLyAgICAgICAgICdvbk1lbnVTaGFyZVRpbWVsaW5lJyxcbiAgICAgICAgLy8gICAgICAgICAnb25NZW51U2hhcmVBcHBNZXNzYWdlJyxcbiAgICAgICAgLy8gICAgICAgICAnaGlkZU1lbnVJdGVtcydcbiAgICAgICAgLy8gICAgICAgXVxuICAgICAgICAvLyAgICAgfSlcbiAgICAgICAgLy8gICAgIHd4LnJlYWR5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gICAgICAgQXBwLnNoYXJlRGF0YSA9IHtcbiAgICAgICAgLy8gICAgICAgICB0aXRsZTogJ01hZ2ljYWwgbW9tZW50cyBmb3IgTmlrZSBEaXJlY3QgRlkxOSBLaWNrIE9mZiBEYXknLFxuICAgICAgICAvLyAgICAgICAgIGxpbms6IGdldFVybCgpLFxuICAgICAgICAvLyAgICAgICAgIGRlc2M6ICfpiobigqwnLFxuICAgICAgICAvLyAgICAgICAgIGltZ1VybDogZ2V0VXJsKCkgKyAnaW1nL3NoYXJlLmpwZz92PTInLFxuICAgICAgICAvLyAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gICAgICAgICB9LFxuICAgICAgICAvLyAgICAgICAgIGNhbmNlbDogZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyAgICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgfTtcbiAgICAgICAgLy8gICAgICAgd3gub25NZW51U2hhcmVUaW1lbGluZShBcHAuc2hhcmVEYXRhKTtcbiAgICAgICAgLy8gICAgICAgd3gub25NZW51U2hhcmVBcHBNZXNzYWdlKEFwcC5zaGFyZURhdGEpO1xuICAgICAgICAvLyAgICAgICB3eC5oaWRlTWVudUl0ZW1zKHtcbiAgICAgICAgLy8gICAgICAgICBtZW51TGlzdDogW1xuICAgICAgICAvLyAgICAgICAgICAgJ21lbnVJdGVtOnNoYXJlOnFxJyxcbiAgICAgICAgLy8gICAgICAgICAgICdtZW51SXRlbTpzaGFyZTp3ZWlib0FwcCcsXG4gICAgICAgIC8vICAgICAgICAgICAnbWVudUl0ZW06c2hhcmU6ZmFjZWJvb2snLFxuICAgICAgICAvLyAgICAgICAgICAgJ21lbnVJdGVtOnNoYXJlOlFab25lJyxcbiAgICAgICAgLy8gICAgICAgICAgICdtZW51SXRlbTpmYXZvcml0ZScsXG4gICAgICAgIC8vICAgICAgICAgICAnbWVudUl0ZW06Y29weVVybCcsXG4gICAgICAgIC8vICAgICAgICAgICAnbWVudUl0ZW06cmVhZE1vZGUnLFxuICAgICAgICAvLyAgICAgICAgICAgJ21lbnVJdGVtOm9wZW5XaXRoUVFCcm93c2VyJyxcbiAgICAgICAgLy8gICAgICAgICAgICdtZW51SXRlbTpvcGVuV2l0aFNhZmFyaScsXG4gICAgICAgIC8vICAgICAgICAgXVxuICAgICAgICAvLyAgICAgICB9KTtcbiAgICAgICAgLy8gICAgIH0pXG4gICAgICAgIC8vICAgICB3eC5lcnJvcihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgIC8vICAgICAgIC8vIGFsZXJ0KHJlcylcbiAgICAgICAgLy8gICAgIH0pXG4gICAgICAgIC8vICAgfSxcbiAgICAgICAgLy8gICBlcnJvcjogZnVuY3Rpb24gKHhociwgYWpheE9wdGlvbnMsIHRocm93bkVycm9yKSB7XG4gICAgICAgIC8vICAgfVxuICAgICAgICAvLyB9KTtcblxuXG4gICAgICAgICAgd3guY29uZmlnKHtcbiAgICAgICAgICAgIGRlYnVnOiBmYWxzZSwgLy8g5byA5ZCv6LCD6K+V5qih5byPLOiwg+eUqOeahOaJgOaciWFwaeeahOi/lOWbnuWAvOS8muWcqOWuouaIt+err2FsZXJ05Ye65p2lXG4gICAgICAgICAgICBhcHBJZDogJ3d4NmZlZGUwYzk5ODlhYTk4YycsIC8vIOW/heWhq++8jOWFrOS8l+WPt+eahOWUr+S4gOagh+ivhlxuICAgICAgICAgICAgdGltZXN0YW1wOiBcIjE1MTM2NjY0NTBcIiwgLy8g5b+F5aGr77yM55Sf5oiQ562+5ZCN55qE5pe26Ze05oizXG4gICAgICAgICAgICBub25jZVN0cjogXCJiNWY4OGNjZi0yMjdhLTQxYzktOWRiMy1kNTg1ZWY2YTkzM2RcIiwgLy8g5b+F5aGr77yM55Sf5oiQ562+5ZCN55qE6ZqP5py65LiyXG4gICAgICAgICAgICBzaWduYXR1cmU6IFwiODQzZjgzNDUyN2ZjNjA1ZGUzMTMwM2FmNWE1YmZiYTk3ZjQwNmUxZVwiLC8vIOW/heWhq++8jOetvuWQje+8jOingemZhOW9lTFcbiAgICAgICAgICAgIGpzQXBpTGlzdDogW1xuICAgICAgICAgICAgICAnb25NZW51U2hhcmVUaW1lbGluZScsXG4gICAgICAgICAgICAgICdvbk1lbnVTaGFyZUFwcE1lc3NhZ2UnLFxuICAgICAgICAgICAgICAnaGlkZU1lbnVJdGVtcydcbiAgICAgICAgICAgIF1cbiAgICAgICAgICB9KVxuICAgICAgICAgIHd4LnJlYWR5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIEFwcC5zaGFyZURhdGEgPSB7XG4gICAgICAgICAgICAgIHRpdGxlOiAnTWFnaWNhbCBtb21lbnRzIGZvciBOaWtlIERpcmVjdCBGWTE5IEtpY2sgT2ZmIERheScsXG4gICAgICAgICAgICAgIGxpbms6IGdldFVybCgpLFxuICAgICAgICAgICAgICBkZXNjOiAn6YqG4oKsJyxcbiAgICAgICAgICAgICAgaW1nVXJsOiBnZXRVcmwoKSArICdpbWcvc2hhcmUuanBnP3Y9MicsXG4gICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgY2FuY2VsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3eC5vbk1lbnVTaGFyZVRpbWVsaW5lKEFwcC5zaGFyZURhdGEpO1xuICAgICAgICAgICAgd3gub25NZW51U2hhcmVBcHBNZXNzYWdlKEFwcC5zaGFyZURhdGEpO1xuICAgICAgICAgICAgd3guaGlkZU1lbnVJdGVtcyh7XG4gICAgICAgICAgICAgIG1lbnVMaXN0OiBbXG4gICAgICAgICAgICAgICAgJ21lbnVJdGVtOnNoYXJlOnFxJyxcbiAgICAgICAgICAgICAgICAnbWVudUl0ZW06c2hhcmU6d2VpYm9BcHAnLFxuICAgICAgICAgICAgICAgICdtZW51SXRlbTpzaGFyZTpmYWNlYm9vaycsXG4gICAgICAgICAgICAgICAgJ21lbnVJdGVtOnNoYXJlOlFab25lJyxcbiAgICAgICAgICAgICAgICAnbWVudUl0ZW06ZmF2b3JpdGUnLFxuICAgICAgICAgICAgICAgICdtZW51SXRlbTpjb3B5VXJsJyxcbiAgICAgICAgICAgICAgICAnbWVudUl0ZW06cmVhZE1vZGUnLFxuICAgICAgICAgICAgICAgICdtZW51SXRlbTpvcGVuV2l0aFFRQnJvd3NlcicsXG4gICAgICAgICAgICAgICAgJ21lbnVJdGVtOm9wZW5XaXRoU2FmYXJpJyxcbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICB3eC5lcnJvcihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgICAvLyBhbGVydChyZXMpXG4gICAgICAgICAgfSk7XG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIC8vIOeCuei1nuWPlua2iOeCuei1nlxuICBoYW5kbGVMaWtlICgpIHtcbiAgICAkKCcucHJldmlldycpLm9uKCd0YXAnLCAnLmJ0bkxpa2UnLCBmdW5jdGlvbiAoZSkge1xuXG4gICAgICBjb25zdCBfdGhpcyA9ICQodGhpcykucGFyZW50cygnLml0ZW0nKTtcbiAgICAgIGNvbnN0ICRoaW50ID0gJCgnI2hpbnQnKTtcbiAgICAgIGlmIChfdGhpcy5oYXNDbGFzcygnZGlzYWJsZWQnKSkgcmV0dXJuO1xuXG4gICAgICBjb25zdCBwX2lkID0gX3RoaXMuZGF0YSgnaWQnKTtcbiAgICAgIGNvbnN0IHJlcyA9IHt9O1xuICAgICAgX3RoaXMuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAvLyAkLnBvc3QoJ2FwaS9waWN0dXJlLnBocD9hY3Q9dm90ZScsIHtcbiAgICAgIC8vICAgcF9pZDogcF9pZFxuICAgICAgLy8gfSwgZnVuY3Rpb24gKHJlcykge1xuICAgICAgICByZXMuY29kZSA9IDE7XG4gICAgICAgIGlmIChyZXMuY29kZSA9PSAxKSB7XG4gICAgICAgICAgX3RoaXMuZmluZCgnLmJ0bkxpa2UgYicpLnRleHQocGFyc2VJbnQoX3RoaXMuZmluZCgnYicpLnRleHQoKSkgKyAxKTtcbiAgICAgICAgICBfdGhpcy5maW5kKCcuYnRuTGlrZSBpJykuYWRkQ2xhc3MoJ2ljb24tZGlhbnphbmVkeCcpLnJlbW92ZUNsYXNzKCdpY29uLWRpYW56YW54Jyk7XG4gICAgICAgICAgJGhpbnQudGV4dCgn5bey54K56LWeJykuc2hvdygpO1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgJGhpbnQuYWRkQ2xhc3MoJ3Nob3ctdG9hc3QnKTtcbiAgICAgICAgICB9LCA1MCk7XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAkaGludC5yZW1vdmVDbGFzcygnc2hvdy10b2FzdCcpLm9uZSgnd2Via2l0VHJhbnNpdGlvbkVuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgJGhpbnQuaGlkZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwgMTQwMCk7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzLmNvZGUgPT0gMikge1xuICAgICAgICAgIF90aGlzLmZpbmQoJy5idG5MaWtlIGInKS50ZXh0KHBhcnNlSW50KF90aGlzLmZpbmQoJ2InKS50ZXh0KCkpIC0gMSk7XG4gICAgICAgICAgX3RoaXMuZmluZCgnLmJ0bkxpa2UgaScpLnJlbW92ZUNsYXNzKCdpY29uLWRpYW56YW5lZHgnKS5hZGRDbGFzcygnaWNvbi1kaWFuemFueCcpO1xuICAgICAgICAgICRoaW50LnRleHQoJ+W3suWPlua2iOeCuei1nicpLnNob3coKTtcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICRoaW50LmFkZENsYXNzKCdzaG93LXRvYXN0Jyk7XG4gICAgICAgICAgfSwgNTApO1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgJGhpbnQucmVtb3ZlQ2xhc3MoJ3Nob3ctdG9hc3QnKS5vbmUoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICRoaW50LmhpZGUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sIDE0MDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhpbnQocmVzLm1zZyk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgIH0sIDMwMCk7XG4gICAgICAvLyB9LCAnanNvbicpO1xuICAgIH0pO1xuICB9XG5cbiAgcGxheVZpZG9lICgpIHtcbiAgICBjb25zdCAkcGxheUJ0biA9ICQoJy5pdGVtIC5wb3N0ZXInKTtcbiAgICBjb25zdCAkdmlkZW9zID0gJCgnLml0ZW0gdmlkZW8nKTtcbiAgICAkdmlkZW9zLm9uKCdwbGF5aW5nJywgZSA9PiB7XG4gICAgICBjb25zdCAkdGFyZ2V0ID0gJChlLnRhcmdldClcbiAgICAgICR0YXJnZXQuY2xvc2VzdCgnLml0ZW0nKS5maW5kKCcucG9zdGVyJykuaGlkZSgpO1xuICAgICAgJHRhcmdldC5jbG9zZXN0KCcuaXRlbScpLmZpbmQoJy5waWNrLWluZm8nKS5oaWRlKCk7XG4gICAgfSk7XG4gICAgJHZpZGVvcy5vbignZW5kZWQnLCBlID0+IHtcbiAgICAgIGNvbnN0ICR0YXJnZXQgPSAkKGUudGFyZ2V0KTtcbiAgICAgICR0YXJnZXQuY2xvc2VzdCgnLml0ZW0nKS5maW5kKCcucG9zdGVyJykuc2hvdygpO1xuICAgICAgJHRhcmdldC5jbG9zZXN0KCcuaXRlbScpLmZpbmQoJy5waWNrLWluZm8nKS5zaG93KCk7XG4gICAgfSk7XG4gICAgJHZpZGVvcy5vbigncGF1c2UnLCBlID0+IHtcbiAgICAgIGNvbnN0ICR0YXJnZXQgPSAkKGUudGFyZ2V0KTtcbiAgICAgICR0YXJnZXQuY2xvc2VzdCgnLml0ZW0nKS5maW5kKCcucG9zdGVyJykuc2hvdygpO1xuICAgICAgJHRhcmdldC5jbG9zZXN0KCcuaXRlbScpLmZpbmQoJy5waWNrLWluZm8nKS5zaG93KCk7XG4gICAgICAkdGFyZ2V0LmNsb3Nlc3QoJy5pdGVtJykuZmluZCgnLnBvc3RlciBpJykuYWRkQ2xhc3MoJ2ljb24tcGxheScpLnJlbW92ZUNsYXNzKCdpY29uLWxvYWRpbmcxJylcbiAgICB9KTtcbiAgICAkcGxheUJ0bi5vbigndGFwJywgKGUpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGNvbnN0ICR0YXJnZXQgPSAkKGUudGFyZ2V0KTtcbiAgICAgIGNvbnN0ICRwYXJlbnRJdGVtID0gJHRhcmdldC5jbG9zZXN0KCcuaXRlbScpLmZpbmQoJ3ZpZGVvJyk7XG4gICAgICBjb25zdCAkaWNvbiA9ICR0YXJnZXQuY2xvc2VzdCgnLml0ZW0nKS5maW5kKCcucG9zdGVyIGknKTtcbiAgICAgICRpY29uLnJlbW92ZUNsYXNzKCdpY29uLXBsYXknKS5hZGRDbGFzcygnaWNvbi1sb2FkaW5nMScpO1xuICAgICAgJHBhcmVudEl0ZW1bMF0ucGxheSgpO1xuICAgIH0pO1xuICB9XG5cblxuICAvLyDop6PlhrPmu5rliqjnqb/pgI/pl67pophcbiAgcHJlZml4ICgpIHtcbiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoZSkge1xuICAgICAgJCh3aW5kb3cpLm9uKCdvcmllbnRhdGlvbmNoYW5nZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciBodG1sQm94ID0gJCgnYm9keScpO1xuICAgICAgICBpZiAod2luZG93Lm9yaWVudGF0aW9uID09IDE4MCB8fCB3aW5kb3cub3JpZW50YXRpb24gPT0gMCkge1xuICAgICAgICAgICQoXCIudHVybkJveFwiKS5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAod2luZG93Lm9yaWVudGF0aW9uID09IDkwIHx8IHdpbmRvdy5vcmllbnRhdGlvbiA9PSAtOTApIHtcbiAgICAgICAgICAkKFwiYm9keVwiKS5hcHBlbmQoJzxhc2lkZSBjbGFzcz1cInR1cm5Cb3hcIj48aW1nIHNyYz1cImltZ3MvdHVybi5wbmdcIiBjbGFzcz1cInR1cm5cIj48cD7or7flsIbmiYvmnLrosIPoh7Pnq5blsY/nirbmgIHvvIzojrflvpfmnIDkvbPmtY/op4jkvZPpqow8L3A+PC9hc2lkZT4nKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAkKCcuY29udGFpbmVyJykub24oJ3RvdWNobW92ZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciBmaXggPSAkKGUudGFyZ2V0KS5wYXJlbnRzKCcuc2Nyb2xsZXInKS5sZW5ndGggfHwgJChlLnRhcmdldCkuaGFzQ2xhc3MoJ3Njcm9sbGVyJyk7XG4gICAgICAgIGlmICghZml4KSBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBfZml4ID0gJChlLnRhcmdldCkuaGFzQ2xhc3MoJ3Njcm9sbGVyJykgPyAkKGUudGFyZ2V0KVswXSA6ICQoZS50YXJnZXQpLnBhcmVudHMoJy5zY3JvbGxlcicpWzBdO1xuICAgICAgICAgIGlmIChfZml4LnNjcm9sbEhlaWdodCA9PSBfZml4Lm9mZnNldEhlaWdodCkgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgICQoJy5zY3JvbGxlcicpLm9uKCdzY3JvbGwnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSAkKGUudGFyZ2V0KVswXTtcbiAgICAgICAgaWYgKF90aGlzLnNjcm9sbFRvcCA9PSAwKSB7XG4gICAgICAgICAgX3RoaXMuc2Nyb2xsVG9wID0gMTtcbiAgICAgICAgfSBlbHNlIGlmIChfdGhpcy5zY3JvbGxUb3AgPT0gX3RoaXMuc2Nyb2xsSGVpZ2h0IC0gX3RoaXMub2Zmc2V0SGVpZ2h0KSB7XG4gICAgICAgICAgX3RoaXMuc2Nyb2xsVG9wID0gX3RoaXMuc2Nyb2xsVG9wIC0gMTtcbiAgICAgICAgfVxuICAgICAgfSkudHJpZ2dlcignc2Nyb2xsJyk7XG4gICAgfSk7XG4gIH1cblxufVxuXG5uZXcgQXBwKCk7Il0sInNvdXJjZVJvb3QiOiIifQ==