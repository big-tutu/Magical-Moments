!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!b[e]||!y[e])return;for(var n in y[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(h[n]=t[n]);0==--g&&0===v&&k()}(e,n),t&&t(e,n)};var n,o=!0,i="59b1e83a33fe26cea324",r=1e4,s={},a=[],c=[];function d(e){var t=D[e];if(!t)return _;var o=function(o){return t.hot.active?(D[o]?-1===D[o].parents.indexOf(e)&&D[o].parents.push(e):(a=[e],n=o),-1===t.children.indexOf(o)&&t.children.push(o)):(console.warn("[HMR] unexpected require("+o+") from disposed module "+e),a=[]),_(o)},i=function(e){return{configurable:!0,enumerable:!0,get:function(){return _[e]},set:function(t){_[e]=t}}};for(var r in _)Object.prototype.hasOwnProperty.call(_,r)&&"e"!==r&&"t"!==r&&Object.defineProperty(o,r,i(r));return o.e=function(e){return"ready"===p&&u("prepare"),v++,_.e(e).then(t,function(e){throw t(),e});function t(){v--,"prepare"===p&&(w[e]||O(e),0===v&&0===g&&k())}},o.t=function(e,t){return 1&t&&(e=o(e)),_.t(e,-2&t)},o}var l=[],p="idle";function u(e){p=e;for(var t=0;t<l.length;t++)l[t].call(null,e)}var f,h,m,g=0,v=0,w={},y={},b={};function x(e){return+e+""===e?+e:e}function j(e){if("idle"!==p)throw new Error("check() is only allowed in idle status");return o=e,u("check"),function(e){return e=e||1e4,new Promise(function(t,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var o=new XMLHttpRequest,r=_.p+""+i+".hot-update.json";o.open("GET",r,!0),o.timeout=e,o.send(null)}catch(e){return n(e)}o.onreadystatechange=function(){if(4===o.readyState)if(0===o.status)n(new Error("Manifest request to "+r+" timed out."));else if(404===o.status)t();else if(200!==o.status&&304!==o.status)n(new Error("Manifest request to "+r+" failed."));else{try{var e=JSON.parse(o.responseText)}catch(e){return void n(e)}t(e)}}})}(r).then(function(e){if(!e)return u("idle"),null;y={},w={},b=e.c,m=e.h,u("prepare");var t=new Promise(function(e,t){f={resolve:e,reject:t}});h={};return O(2),"prepare"===p&&0===v&&0===g&&k(),t})}function O(e){b[e]?(y[e]=!0,g++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=_.p+""+e+"."+i+".hot-update.js",t.appendChild(n)}(e)):w[e]=!0}function k(){u("ready");var e=f;if(f=null,e)if(o)Promise.resolve().then(function(){return I(o)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in h)Object.prototype.hasOwnProperty.call(h,n)&&t.push(x(n));e.resolve(t)}}function I(t){if("ready"!==p)throw new Error("apply() is only allowed in ready status");var n,o,r,c,d;function l(e){for(var t=[e],n={},o=t.slice().map(function(e){return{chain:[e],id:e}});o.length>0;){var i=o.pop(),r=i.id,s=i.chain;if((c=D[r])&&!c.hot._selfAccepted){if(c.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:r};if(c.hot._main)return{type:"unaccepted",chain:s,moduleId:r};for(var a=0;a<c.parents.length;a++){var d=c.parents[a],l=D[d];if(l){if(l.hot._declinedDependencies[r])return{type:"declined",chain:s.concat([d]),moduleId:r,parentId:d};-1===t.indexOf(d)&&(l.hot._acceptedDependencies[r]?(n[d]||(n[d]=[]),f(n[d],[r])):(delete n[d],t.push(d),o.push({chain:s.concat([d]),id:d})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function f(e,t){for(var n=0;n<t.length;n++){var o=t[n];-1===e.indexOf(o)&&e.push(o)}}t=t||{};var g={},v=[],w={},y=function(){console.warn("[HMR] unexpected require("+O.moduleId+") to disposed module")};for(var j in h)if(Object.prototype.hasOwnProperty.call(h,j)){var O;d=x(j);var k=!1,I=!1,M=!1,T="";switch((O=h[j]?l(d):{type:"disposed",moduleId:j}).chain&&(T="\nUpdate propagation: "+O.chain.join(" -> ")),O.type){case"self-declined":t.onDeclined&&t.onDeclined(O),t.ignoreDeclined||(k=new Error("Aborted because of self decline: "+O.moduleId+T));break;case"declined":t.onDeclined&&t.onDeclined(O),t.ignoreDeclined||(k=new Error("Aborted because of declined dependency: "+O.moduleId+" in "+O.parentId+T));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(O),t.ignoreUnaccepted||(k=new Error("Aborted because "+d+" is not accepted"+T));break;case"accepted":t.onAccepted&&t.onAccepted(O),I=!0;break;case"disposed":t.onDisposed&&t.onDisposed(O),M=!0;break;default:throw new Error("Unexception type "+O.type)}if(k)return u("abort"),Promise.reject(k);if(I)for(d in w[d]=h[d],f(v,O.outdatedModules),O.outdatedDependencies)Object.prototype.hasOwnProperty.call(O.outdatedDependencies,d)&&(g[d]||(g[d]=[]),f(g[d],O.outdatedDependencies[d]));M&&(f(v,[O.moduleId]),w[d]=y)}var E,L=[];for(o=0;o<v.length;o++)d=v[o],D[d]&&D[d].hot._selfAccepted&&L.push({module:d,errorHandler:D[d].hot._selfAccepted});u("dispose"),Object.keys(b).forEach(function(e){!1===b[e]&&function(e){delete installedChunks[e]}(e)});for(var P,C,H=v.slice();H.length>0;)if(d=H.pop(),c=D[d]){var A={},S=c.hot._disposeHandlers;for(r=0;r<S.length;r++)(n=S[r])(A);for(s[d]=A,c.hot.active=!1,delete D[d],delete g[d],r=0;r<c.children.length;r++){var U=D[c.children[r]];U&&((E=U.parents.indexOf(d))>=0&&U.parents.splice(E,1))}}for(d in g)if(Object.prototype.hasOwnProperty.call(g,d)&&(c=D[d]))for(C=g[d],r=0;r<C.length;r++)P=C[r],(E=c.children.indexOf(P))>=0&&c.children.splice(E,1);for(d in u("apply"),i=m,w)Object.prototype.hasOwnProperty.call(w,d)&&(e[d]=w[d]);var q=null;for(d in g)if(Object.prototype.hasOwnProperty.call(g,d)&&(c=D[d])){C=g[d];var z=[];for(o=0;o<C.length;o++)if(P=C[o],n=c.hot._acceptedDependencies[P]){if(-1!==z.indexOf(n))continue;z.push(n)}for(o=0;o<z.length;o++){n=z[o];try{n(C)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:d,dependencyId:C[o],error:e}),t.ignoreErrored||q||(q=e)}}}for(o=0;o<L.length;o++){var N=L[o];d=N.module,a=[d];try{_(d)}catch(e){if("function"==typeof N.errorHandler)try{N.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:d,error:n,originalError:e}),t.ignoreErrored||q||(q=n),q||(q=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:d,error:e}),t.ignoreErrored||q||(q=e)}}return q?(u("fail"),Promise.reject(q)):(u("idle"),new Promise(function(e){e(v)}))}var D={};function _(t){if(D[t])return D[t].exports;var o=D[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var o=0;o<e.length;o++)t._acceptedDependencies[e[o]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:j,apply:I,status:function(e){if(!e)return p;l.push(e)},addStatusHandler:function(e){l.push(e)},removeStatusHandler:function(e){var t=l.indexOf(e);t>=0&&l.splice(t,1)},data:s[e]};return n=void 0,t}(t),parents:(c=a,a=[],c),children:[]};return e[t].call(o.exports,o,o.exports,d(t)),o.l=!0,o.exports}_.m=e,_.c=D,_.d=function(e,t,n){_.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},_.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},_.t=function(e,t){if(1&t&&(e=_(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(_.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)_.d(n,o,function(t){return e[t]}.bind(null,o));return n},_.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return _.d(t,"a",t),t},_.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},_.p="",_.h=function(){return i},d("./src/js/index.js")(_.s="./src/js/index.js")}({"./src/css/style.scss":function(e,t){},"./src/js/index.js":function(e,t,n){"use strict";n.r(t);n("./src/css/style.scss");!function(e,t){const n=function(){return location.origin+location.pathname};t(function(){new class{constructor(){this.music={audio:{}},this.currentList="home",this.loading=!1,this.hasMore=!0,this.currentPage=1,this.api={LIST:"/api/media/list",WX_CONFIG:"/api/getConfig",UPLOAD:"/api/media/upload",MAKE_LOVE:"/api/media/love"},this.init()}init(){this.wxJssdk(),this.main(),this.prefix(),this.waterfallsFlow(),this.handleLike(),this.playVidoe(),this.showTip(),this.scrollLoadMore(),this.getList({page:1,patten:1,count:20},"home")}main(){t(".btn-upload").on("tap",e=>{e.preventDefault(),t("#filedata").trigger("click")}),t(".btn-home").on("tap",e=>{e.preventDefault(),this.page("home")}),t(".btn-rank").on("tap",e=>{e.preventDefault(),this.page("rank")}),t("#filedata").UploadImg({url:this.api.UPLOAD,width:"750",showTips:this.showTost,quality:"0.8",mixsize:"10000000",type:"image/png,image/jpg,image/jpeg,image/pjpeg,image/gif,image/bmp,image/x-png",success:function(e){1==e.code?page("index"):hint(e.msg)}})}waterfallsFlow(){const e=t("#masonry");parseInt(window.screen.width),e.masonry({itemSelector:".item",gutterWidth:0,isResizable:!0})}page(e){t("#page-"+e).addClass("active").siblings(".page").removeClass("active"),this.getList({page:1,count:10,patten:2},e)}showTip(){const e=t("#page-rules");t(".btn-rules").on("tap",t=>{t.preventDefault(),e.show(),setTimeout(function(){e.addClass("show")},50)}),t(".close").on("tap",n=>{e.removeClass("show").one("webkitTransitionEnd",function(){t(this).hide()})})}getList(e,n){const o=this.api.LIST,i=this,r=/.(jpg|jpeg|png|gif|x-png|bmp|pjpeg)/,s={...e};i.loading=!0,t.get(o,s,e=>{if(i.loading=!1,0===e.ret){const o=e.data.dataList;if(0===o.length)return void i.showTost("已经是全部数据了");i.hasMore=20===o.length;const s=o.map(e=>r.test(e.path)?`<div class="item masonry-brick" data-id="${e.id}" data-src="${e.path}" data-love="1">\n                <img src="${e.path}">\n                <div class="pick-info">\n                  <i class="type iconfont icon-tupianx"></i>\n                  <span class="btnLike">\n                    <i class="iconfont icon-dianzanx"></i>\n                    <b>${e.voteNum}</b>\n                  </span>\n                </div>\n              </div>`:`<div class="item masonry-brick video" data-id="${e.id}" data-love="1">\n                <video\n                controls \n                src="${e.path}"\n                x5-video-player-type="h5" \n                x5-video-player-fullscreen="true"></video>\n                <div class="poster">\n                  <img src="imgs/test.png">\n                  <i class="iconfont icon-play"></i>\n                </div>\n                <div class="pick-info">\n                  <i class="type iconfont icon-shipinx"></i>\n                  <span class="btnLike">\n                    <i class="iconfont icon-dianzanx"></i>\n                    <b>${e.voteNum}</b>\n                  </span>\n                </div>\n              </div>`);t(`#page-${n}`).find(".scroller").append(s.join("")),setInterval(function(){t("#masonry").masonry("reload")},100)}else i.showTost(e&&e.msg||"网络错误，请稍后重试")})}previewPic(){t(".preview").on("tap",".item",e=>{const o=t(e.target);if(o.hasClass("btnLike")||o.parents(".btnLike").length)return;const i=n(),r=o.closest(".preview").find(".item").map((e,n)=>{const o=t(n);return i+o.data("src")});"undefined"!=typeof wx&&wx.previewImage({current:i+o.data("src")||o.attr("src"),urls:r})})}wxJssdk(){const e=this.api.WX_CONFIG;/MicroMessenger/i.test(navigator.userAgent)&&(document.addEventListener("WeixinJSBridgeReady",function(){WeixinJSBridge.call("hideToolbar")}),t.getScript("https://res.wx.qq.com/open/js/jweixin-1.0.0.js",function(){t.get(e,e=>{if(0===e.ret){const t=e.data;wx.config({debug:!0,appId:t.appId,timestamp:t.timestamp,nonceStr:t.noncestr,signature:t.signature,jsApiList:["onMenuShareTimeline","onMenuShareAppMessage","hideMenuItems","previewImage"]}),alert("data"),wx.ready(function(){alert("shareData");const e={title:"Magical moments for Nike Direct FY19 Kick Off Day",link:"http://photo-moments.xyz/mobile/index",desc:"这是分享的描述部分",imgUrl:"http://photo-moments.xyz/static/imgs/background.jpg",success:function(){alert("success")},cancel:function(){}};wx.onMenuShareTimeline(e),wx.onMenuShareAppMessage(e),wx.hideMenuItems({menuList:["menuItem:share:qq","menuItem:share:weiboApp","menuItem:share:facebook","menuItem:share:QZone","menuItem:favorite","menuItem:copyUrl","menuItem:readMode","menuItem:openWithQQBrowser","menuItem:openWithSafari"]})}),wx.error(function(e){alert("dd",JSON.stringify(e))})}})}))}handleLike(){const e=this,n=this.api.MAKE_LOVE;t(".preview").on("tap",".btnLike",function(o){const i=t(this).parents(".item");if(t("#hint"),i.hasClass("disabled"))return;const r=i.data("id"),s=parseInt(i.attr("data-love"));i.addClass("disabled"),t.post(n,{id:r,act:s},function(t){0===t.ret?1===s?(i.find(".btnLike b").text(parseInt(i.find("b").text())+1),i.find(".btnLike i").addClass("icon-dianzanedx").removeClass("icon-dianzanx"),i.removeAttr("love"),i.attr("data-love",2),e.showTost("已点赞")):(i.find(".btnLike b").text(parseInt(i.find("b").text())-1),i.find(".btnLike i").removeClass("icon-dianzanedx").addClass("icon-dianzanx"),i.removeAttr("love"),i.attr("data-love",1),e.showTost("已取消点赞")):e.showTost(t&&t.msg||"网络错误请稍后重试"),setTimeout(function(){i.removeClass("disabled")},300)},"json")})}playVidoe(){const e=t(".item .poster"),n=t(".item video");n.on("playing",e=>{const n=t(e.target);n.closest(".item").find(".poster").hide(),n.closest(".item").find(".pick-info").hide()}),n.on("ended",e=>{const n=t(e.target);n.closest(".item").find(".poster").show(),n.closest(".item").find(".pick-info").show()}),n.on("pause",e=>{const n=t(e.target);n.closest(".item").find(".poster").show(),n.closest(".item").find(".pick-info").show(),n.closest(".item").find(".poster i").addClass("icon-play").removeClass("icon-loading1")}),e.on("tap",e=>{e.preventDefault();const n=t(e.target),o=n.closest(".item").find("video");n.closest(".item").find(".poster i").removeClass("icon-play").addClass("icon-loading1"),o[0].play()})}prefix(){t(document).ready(function(e){t(window).on("orientationchange",function(e){t("body"),180!=window.orientation&&0!=window.orientation||t(".turnBox").remove(),90!=window.orientation&&-90!=window.orientation||t("body").append('<aside class="turnBox"><img src="imgs/turn.png" class="turn"><p>请将手机调至竖屏状态，获得最佳浏览体验</p></aside>')}),t(".container").on("touchmove",function(e){if(t(e.target).parents(".scroller").length||t(e.target).hasClass("scroller")){var n=t(e.target).hasClass("scroller")?t(e.target)[0]:t(e.target).parents(".scroller")[0];n.scrollHeight==n.offsetHeight&&e.preventDefault()}else e.preventDefault()}),t(".scroller").on("scroll",function(e){var n=t(e.target)[0];0==n.scrollTop?n.scrollTop=1:n.scrollTop==n.scrollHeight-n.offsetHeight&&(n.scrollTop=n.scrollTop-1)}).trigger("scroll")})}scrollLoadMore(){const e=this;t("#masonry").on("scroll",function(){const n=t(this),o=parseInt(n.find(".item:last").css("top"))+parseInt(n.find(".item:last").css("height")),i=n.scrollTop();console.log(o,i);const r=o-i;let s=e.currentPage;console.log(e.loading,e.hasMore),r<1800&&!e.loading&&e.hasMore&&(s+=1,e.currentPage=s,e.getList({page:s,count:20,patten:1},"home"))})}showTost(e){const n=t("#hint");n.text(e).show(),setTimeout(()=>{n.addClass("show-toast")},50),setTimeout(()=>{n.removeClass("show-toast").one("webkitTransitionEnd",function(){n.hide()})},1400)}}})}(window,$)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,