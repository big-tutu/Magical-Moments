!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!b[e]||!y[e])return;for(var n in y[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(h[n]=t[n]);0==--g&&0===v&&$()}(e,n),t&&t(e,n)};var n,r=!0,o="f978f8acd823747f0301",i=1e4,s={},a=[],c=[];function d(e){var t=O[e];if(!t)return I;var r=function(r){return t.hot.active?(O[r]?-1===O[r].parents.indexOf(e)&&O[r].parents.push(e):(a=[e],n=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),a=[]),I(r)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return I[e]},set:function(t){I[e]=t}}};for(var i in I)Object.prototype.hasOwnProperty.call(I,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(r,i,o(i));return r.e=function(e){return"ready"===p&&u("prepare"),v++,I.e(e).then(t,function(e){throw t(),e});function t(){v--,"prepare"===p&&(w[e]||j(e),0===v&&0===g&&$())}},r.t=function(e,t){return 1&t&&(e=r(e)),I.t(e,-2&t)},r}var l=[],p="idle";function u(e){p=e;for(var t=0;t<l.length;t++)l[t].call(null,e)}var f,h,m,g=0,v=0,w={},y={},b={};function x(e){return+e+""===e?+e:e}function D(e){if("idle"!==p)throw new Error("check() is only allowed in idle status");return r=e,u("check"),function(e){return e=e||1e4,new Promise(function(t,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,i=I.p+""+o+".hot-update.json";r.open("GET",i,!0),r.timeout=e,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+i+" timed out."));else if(404===r.status)t();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+i+" failed."));else{try{var e=JSON.parse(r.responseText)}catch(e){return void n(e)}t(e)}}})}(i).then(function(e){if(!e)return u("idle"),null;y={},w={},b=e.c,m=e.h,u("prepare");var t=new Promise(function(e,t){f={resolve:e,reject:t}});h={};return j(0),"prepare"===p&&0===v&&0===g&&$(),t})}function j(e){b[e]?(y[e]=!0,g++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=I.p+""+e+"."+o+".hot-update.js",t.appendChild(n)}(e)):w[e]=!0}function $(){u("ready");var e=f;if(f=null,e)if(r)Promise.resolve().then(function(){return k(r)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in h)Object.prototype.hasOwnProperty.call(h,n)&&t.push(x(n));e.resolve(t)}}function k(t){if("ready"!==p)throw new Error("apply() is only allowed in ready status");var n,r,i,c,d;function l(e){for(var t=[e],n={},r=t.slice().map(function(e){return{chain:[e],id:e}});r.length>0;){var o=r.pop(),i=o.id,s=o.chain;if((c=O[i])&&!c.hot._selfAccepted){if(c.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:i};if(c.hot._main)return{type:"unaccepted",chain:s,moduleId:i};for(var a=0;a<c.parents.length;a++){var d=c.parents[a],l=O[d];if(l){if(l.hot._declinedDependencies[i])return{type:"declined",chain:s.concat([d]),moduleId:i,parentId:d};-1===t.indexOf(d)&&(l.hot._acceptedDependencies[i]?(n[d]||(n[d]=[]),f(n[d],[i])):(delete n[d],t.push(d),r.push({chain:s.concat([d]),id:d})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}t=t||{};var g={},v=[],w={},y=function(){console.warn("[HMR] unexpected require("+j.moduleId+") to disposed module")};for(var D in h)if(Object.prototype.hasOwnProperty.call(h,D)){var j;d=x(D);var $=!1,k=!1,_=!1,E="";switch((j=h[D]?l(d):{type:"disposed",moduleId:D}).chain&&(E="\nUpdate propagation: "+j.chain.join(" -> ")),j.type){case"self-declined":t.onDeclined&&t.onDeclined(j),t.ignoreDeclined||($=new Error("Aborted because of self decline: "+j.moduleId+E));break;case"declined":t.onDeclined&&t.onDeclined(j),t.ignoreDeclined||($=new Error("Aborted because of declined dependency: "+j.moduleId+" in "+j.parentId+E));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(j),t.ignoreUnaccepted||($=new Error("Aborted because "+d+" is not accepted"+E));break;case"accepted":t.onAccepted&&t.onAccepted(j),k=!0;break;case"disposed":t.onDisposed&&t.onDisposed(j),_=!0;break;default:throw new Error("Unexception type "+j.type)}if($)return u("abort"),Promise.reject($);if(k)for(d in w[d]=h[d],f(v,j.outdatedModules),j.outdatedDependencies)Object.prototype.hasOwnProperty.call(j.outdatedDependencies,d)&&(g[d]||(g[d]=[]),f(g[d],j.outdatedDependencies[d]));_&&(f(v,[j.moduleId]),w[d]=y)}var C,M=[];for(r=0;r<v.length;r++)d=v[r],O[d]&&O[d].hot._selfAccepted&&M.push({module:d,errorHandler:O[d].hot._selfAccepted});u("dispose"),Object.keys(b).forEach(function(e){!1===b[e]&&function(e){delete installedChunks[e]}(e)});for(var T,H,P=v.slice();P.length>0;)if(d=P.pop(),c=O[d]){var S={},A=c.hot._disposeHandlers;for(i=0;i<A.length;i++)(n=A[i])(S);for(s[d]=S,c.hot.active=!1,delete O[d],delete g[d],i=0;i<c.children.length;i++){var L=O[c.children[i]];L&&((C=L.parents.indexOf(d))>=0&&L.parents.splice(C,1))}}for(d in g)if(Object.prototype.hasOwnProperty.call(g,d)&&(c=O[d]))for(H=g[d],i=0;i<H.length;i++)T=H[i],(C=c.children.indexOf(T))>=0&&c.children.splice(C,1);for(d in u("apply"),o=m,w)Object.prototype.hasOwnProperty.call(w,d)&&(e[d]=w[d]);var q=null;for(d in g)if(Object.prototype.hasOwnProperty.call(g,d)&&(c=O[d])){H=g[d];var U=[];for(r=0;r<H.length;r++)if(T=H[r],n=c.hot._acceptedDependencies[T]){if(-1!==U.indexOf(n))continue;U.push(n)}for(r=0;r<U.length;r++){n=U[r];try{n(H)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:d,dependencyId:H[r],error:e}),t.ignoreErrored||q||(q=e)}}}for(r=0;r<M.length;r++){var B=M[r];d=B.module,a=[d];try{I(d)}catch(e){if("function"==typeof B.errorHandler)try{B.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:d,error:n,originalError:e}),t.ignoreErrored||q||(q=n),q||(q=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:d,error:e}),t.ignoreErrored||q||(q=e)}}return q?(u("fail"),Promise.reject(q)):(u("idle"),new Promise(function(e){e(v)}))}var O={};function I(t){if(O[t])return O[t].exports;var r=O[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:D,apply:k,status:function(e){if(!e)return p;l.push(e)},addStatusHandler:function(e){l.push(e)},removeStatusHandler:function(e){var t=l.indexOf(e);t>=0&&l.splice(t,1)},data:s[e]};return n=void 0,t}(t),parents:(c=a,a=[],c),children:[]};return e[t].call(r.exports,r,r.exports,d(t)),r.l=!0,r.exports}I.m=e,I.c=O,I.d=function(e,t,n){I.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},I.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},I.t=function(e,t){if(1&t&&(e=I(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(I.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)I.d(n,r,function(t){return e[t]}.bind(null,r));return n},I.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return I.d(t,"a",t),t},I.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},I.p="",I.h=function(){return o},d("./src/index.js")(I.s="./src/index.js")}({"./src/css/style.scss":function(e,t){},"./src/index.js":function(e,t,n){"use strict";n.r(t);n("./src/css/style.scss");const r=function(){return location.origin+location.pathname};class o{constructor(){this.music={audio:{}},this.init()}init(){this.main(),this.prefix(),this.waterfallsFlow(),this.previewPic(),this.handleLike(),this.playVidoe(),this.showTip()}main(){$(".btn-upload").on("tap",e=>{e.preventDefault(),$("#filedata").trigger("click")}),$(".btn-home").on("tap",e=>{e.preventDefault(),this.page("home")}),$(".btn-rank").on("tap",e=>{e.preventDefault(),this.page("rank")}),$("#filedata").UploadImg({url:"api/picture.php?act=upload",width:"750",quality:"0.8",mixsize:"10000000",type:"image/png,image/jpg,image/jpeg,image/pjpeg,image/gif,image/bmp,image/x-png",success:function(e){1==e.code?page("index"):hint(e.msg)}})}renderPicker(){}waterfallsFlow(){const e=$("#masonry");parseInt(window.screen.width);e.masonry({itemSelector:".item",gutterWidth:0,isResizable:!0})}page(e){const t=$("#page-"+e);console.log(t),t.addClass("active").siblings(".page").removeClass("active")}showTip(){const e=$("#page-rules");$(".btn-rules").on("tap",t=>{t.preventDefault(),e.show(),setTimeout(function(){e.addClass("show")},50)}),$(".close").on("tap",t=>{e.removeClass("show").one("webkitTransitionEnd",function(){$(this).hide()})})}previewPic(){$(".preview").on("tap",".item",e=>{const t=$(e.target);if(t.hasClass("btnLike")||t.parents(".btnLike").length)return;const n=r(),o=t.closest(".preview").find(".item").map((e,t)=>{const r=$(t);return n+r.data("src")});"undefined"!=typeof wx&&wx.previewImage({current:n+t.data("src")||t.attr("src"),urls:o})})}wxJssdk(){/MicroMessenger/i.test(navigator.userAgent)&&(document.addEventListener("WeixinJSBridgeReady",function(){this.music.play("music"),this.music.play("time"),this.music.stop("time")},!1),document.addEventListener("WeixinJSBridgeReady",function(){WeixinJSBridge.call("hideToolbar")}),$.getScript("https://res.wx.qq.com/open/js/jweixin-1.0.0.js",function(){console.log("test"),wx.config({debug:!1,appId:"wx6fede0c9989aa98c",timestamp:"1513666450",nonceStr:"b5f88ccf-227a-41c9-9db3-d585ef6a933d",signature:"843f834527fc605de31303af5a5bfba97f406e1e",jsApiList:["onMenuShareTimeline","onMenuShareAppMessage","hideMenuItems"]}),wx.ready(function(){o.shareData={title:"Magical moments for Nike Direct FY19 Kick Off Day",link:r(),desc:"銆€",imgUrl:r()+"img/share.jpg?v=2",success:function(){},cancel:function(){}},wx.onMenuShareTimeline(o.shareData),wx.onMenuShareAppMessage(o.shareData),wx.hideMenuItems({menuList:["menuItem:share:qq","menuItem:share:weiboApp","menuItem:share:facebook","menuItem:share:QZone","menuItem:favorite","menuItem:copyUrl","menuItem:readMode","menuItem:openWithQQBrowser","menuItem:openWithSafari"]})}),wx.error(function(e){})}))}handleLike(){$(".preview").on("tap",".btnLike",function(e){const t=$(this).parents(".item"),n=$("#hint");if(t.hasClass("disabled"))return;t.data("id");const r={};t.addClass("disabled"),r.code=1,1==r.code?(t.find(".btnLike b").text(parseInt(t.find("b").text())+1),t.find(".btnLike i").addClass("icon-dianzanedx").removeClass("icon-dianzanx"),n.text("已点赞").show(),setTimeout(()=>{n.addClass("show-toast")},50),setTimeout(()=>{n.removeClass("show-toast").one("webkitTransitionEnd",function(){n.hide()})},1400)):2==r.code?(t.find(".btnLike b").text(parseInt(t.find("b").text())-1),t.find(".btnLike i").removeClass("icon-dianzanedx").addClass("icon-dianzanx"),n.text("已取消点赞").show(),setTimeout(()=>{n.addClass("show-toast")},50),setTimeout(()=>{n.removeClass("show-toast").one("webkitTransitionEnd",function(){n.hide()})},1400)):hint(r.msg),setTimeout(function(){t.removeClass("disabled")},300)})}playVidoe(){const e=$(".item .poster"),t=$(".item video");t.on("playing",e=>{const t=$(e.target);t.closest(".item").find(".poster").hide(),t.closest(".item").find(".pick-info").hide()}),t.on("ended",e=>{const t=$(e.target);t.closest(".item").find(".poster").show(),t.closest(".item").find(".pick-info").show()}),t.on("pause",e=>{const t=$(e.target);t.closest(".item").find(".poster").show(),t.closest(".item").find(".pick-info").show(),t.closest(".item").find(".poster i").addClass("icon-play").removeClass("icon-loading1")}),e.on("tap",e=>{e.preventDefault();const t=$(e.target),n=t.closest(".item").find("video");t.closest(".item").find(".poster i").removeClass("icon-play").addClass("icon-loading1"),n[0].play()})}prefix(){$(document).ready(function(e){$(window).on("orientationchange",function(e){$("body");180!=window.orientation&&0!=window.orientation||$(".turnBox").remove(),90!=window.orientation&&-90!=window.orientation||$("body").append('<aside class="turnBox"><img src="imgs/turn.png" class="turn"><p>请将手机调至竖屏状态，获得最佳浏览体验</p></aside>')}),$(".container").on("touchmove",function(e){if($(e.target).parents(".scroller").length||$(e.target).hasClass("scroller")){var t=$(e.target).hasClass("scroller")?$(e.target)[0]:$(e.target).parents(".scroller")[0];t.scrollHeight==t.offsetHeight&&e.preventDefault()}else e.preventDefault()}),$(".scroller").on("scroll",function(e){var t=$(e.target)[0];0==t.scrollTop?t.scrollTop=1:t.scrollTop==t.scrollHeight-t.offsetHeight&&(t.scrollTop=t.scrollTop-1)}).trigger("scroll")})}}new o}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,