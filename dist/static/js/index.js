!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!b[e]||!y[e])return;for(var n in y[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(h[n]=t[n]);0==--v&&0===g&&O()}(e,n),t&&t(e,n)};var n,i=!0,o="19e30261236f6fa5f0e6",r=1e4,a={},s=[],d=[];function c(e){var t=T[e];if(!t)return D;var i=function(i){return t.hot.active?(T[i]?-1===T[i].parents.indexOf(e)&&T[i].parents.push(e):(s=[e],n=i),-1===t.children.indexOf(i)&&t.children.push(i)):(console.warn("[HMR] unexpected require("+i+") from disposed module "+e),s=[]),D(i)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return D[e]},set:function(t){D[e]=t}}};for(var r in D)Object.prototype.hasOwnProperty.call(D,r)&&"e"!==r&&"t"!==r&&Object.defineProperty(i,r,o(r));return i.e=function(e){return"ready"===p&&u("prepare"),g++,D.e(e).then(t,function(e){throw t(),e});function t(){g--,"prepare"===p&&(w[e]||k(e),0===g&&0===v&&O())}},i.t=function(e,t){return 1&t&&(e=i(e)),D.t(e,-2&t)},i}var l=[],p="idle";function u(e){p=e;for(var t=0;t<l.length;t++)l[t].call(null,e)}var f,h,m,v=0,g=0,w={},y={},b={};function x(e){return+e+""===e?+e:e}function I(e){if("idle"!==p)throw new Error("check() is only allowed in idle status");return i=e,u("check"),function(e){return e=e||1e4,new Promise(function(t,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var i=new XMLHttpRequest,r=D.p+""+o+".hot-update.json";i.open("GET",r,!0),i.timeout=e,i.send(null)}catch(e){return n(e)}i.onreadystatechange=function(){if(4===i.readyState)if(0===i.status)n(new Error("Manifest request to "+r+" timed out."));else if(404===i.status)t();else if(200!==i.status&&304!==i.status)n(new Error("Manifest request to "+r+" failed."));else{try{var e=JSON.parse(i.responseText)}catch(e){return void n(e)}t(e)}}})}(r).then(function(e){if(!e)return u("idle"),null;y={},w={},b=e.c,m=e.h,u("prepare");var t=new Promise(function(e,t){f={resolve:e,reject:t}});h={};return k(2),"prepare"===p&&0===g&&0===v&&O(),t})}function k(e){b[e]?(y[e]=!0,v++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=D.p+""+e+"."+o+".hot-update.js",t.appendChild(n)}(e)):w[e]=!0}function O(){u("ready");var e=f;if(f=null,e)if(i)Promise.resolve().then(function(){return j(i)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in h)Object.prototype.hasOwnProperty.call(h,n)&&t.push(x(n));e.resolve(t)}}function j(t){if("ready"!==p)throw new Error("apply() is only allowed in ready status");var n,i,r,d,c;function l(e){for(var t=[e],n={},i=t.slice().map(function(e){return{chain:[e],id:e}});i.length>0;){var o=i.pop(),r=o.id,a=o.chain;if((d=T[r])&&!d.hot._selfAccepted){if(d.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:r};if(d.hot._main)return{type:"unaccepted",chain:a,moduleId:r};for(var s=0;s<d.parents.length;s++){var c=d.parents[s],l=T[c];if(l){if(l.hot._declinedDependencies[r])return{type:"declined",chain:a.concat([c]),moduleId:r,parentId:c};-1===t.indexOf(c)&&(l.hot._acceptedDependencies[r]?(n[c]||(n[c]=[]),f(n[c],[r])):(delete n[c],t.push(c),i.push({chain:a.concat([c]),id:c})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function f(e,t){for(var n=0;n<t.length;n++){var i=t[n];-1===e.indexOf(i)&&e.push(i)}}t=t||{};var v={},g=[],w={},y=function(){console.warn("[HMR] unexpected require("+k.moduleId+") to disposed module")};for(var I in h)if(Object.prototype.hasOwnProperty.call(h,I)){var k;c=x(I);var O=!1,j=!1,_=!1,C="";switch((k=h[I]?l(c):{type:"disposed",moduleId:I}).chain&&(C="\nUpdate propagation: "+k.chain.join(" -> ")),k.type){case"self-declined":t.onDeclined&&t.onDeclined(k),t.ignoreDeclined||(O=new Error("Aborted because of self decline: "+k.moduleId+C));break;case"declined":t.onDeclined&&t.onDeclined(k),t.ignoreDeclined||(O=new Error("Aborted because of declined dependency: "+k.moduleId+" in "+k.parentId+C));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(k),t.ignoreUnaccepted||(O=new Error("Aborted because "+c+" is not accepted"+C));break;case"accepted":t.onAccepted&&t.onAccepted(k),j=!0;break;case"disposed":t.onDisposed&&t.onDisposed(k),_=!0;break;default:throw new Error("Unexception type "+k.type)}if(O)return u("abort"),Promise.reject(O);if(j)for(c in w[c]=h[c],f(g,k.outdatedModules),k.outdatedDependencies)Object.prototype.hasOwnProperty.call(k.outdatedDependencies,c)&&(v[c]||(v[c]=[]),f(v[c],k.outdatedDependencies[c]));_&&(f(g,[k.moduleId]),w[c]=y)}var L,P=[];for(i=0;i<g.length;i++)c=g[i],T[c]&&T[c].hot._selfAccepted&&P.push({module:c,errorHandler:T[c].hot._selfAccepted});u("dispose"),Object.keys(b).forEach(function(e){!1===b[e]&&function(e){delete installedChunks[e]}(e)});for(var M,E,A=g.slice();A.length>0;)if(c=A.pop(),d=T[c]){var H={},S=d.hot._disposeHandlers;for(r=0;r<S.length;r++)(n=S[r])(H);for(a[c]=H,d.hot.active=!1,delete T[c],delete v[c],r=0;r<d.children.length;r++){var $=T[d.children[r]];$&&((L=$.parents.indexOf(c))>=0&&$.parents.splice(L,1))}}for(c in v)if(Object.prototype.hasOwnProperty.call(v,c)&&(d=T[c]))for(E=v[c],r=0;r<E.length;r++)M=E[r],(L=d.children.indexOf(M))>=0&&d.children.splice(L,1);for(c in u("apply"),o=m,w)Object.prototype.hasOwnProperty.call(w,c)&&(e[c]=w[c]);var U=null;for(c in v)if(Object.prototype.hasOwnProperty.call(v,c)&&(d=T[c])){E=v[c];var z=[];for(i=0;i<E.length;i++)if(M=E[i],n=d.hot._acceptedDependencies[M]){if(-1!==z.indexOf(n))continue;z.push(n)}for(i=0;i<z.length;i++){n=z[i];try{n(E)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:c,dependencyId:E[i],error:e}),t.ignoreErrored||U||(U=e)}}}for(i=0;i<P.length;i++){var q=P[i];c=q.module,s=[c];try{D(c)}catch(e){if("function"==typeof q.errorHandler)try{q.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:c,error:n,originalError:e}),t.ignoreErrored||U||(U=n),U||(U=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:c,error:e}),t.ignoreErrored||U||(U=e)}}return U?(u("fail"),Promise.reject(U)):(u("idle"),new Promise(function(e){e(g)}))}var T={};function D(t){if(T[t])return T[t].exports;var i=T[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var i=0;i<e.length;i++)t._acceptedDependencies[e[i]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:I,apply:j,status:function(e){if(!e)return p;l.push(e)},addStatusHandler:function(e){l.push(e)},removeStatusHandler:function(e){var t=l.indexOf(e);t>=0&&l.splice(t,1)},data:a[e]};return n=void 0,t}(t),parents:(d=s,s=[],d),children:[]};return e[t].call(i.exports,i,i.exports,c(t)),i.l=!0,i.exports}D.m=e,D.c=T,D.d=function(e,t,n){D.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},D.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},D.t=function(e,t){if(1&t&&(e=D(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(D.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)D.d(n,i,function(t){return e[t]}.bind(null,i));return n},D.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return D.d(t,"a",t),t},D.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},D.p="",D.h=function(){return o},c("./src/js/index.js")(D.s="./src/js/index.js")}({"./src/css/style.scss":function(e,t){},"./src/js/index.js":function(e,t,n){"use strict";n.r(t);n("./src/css/style.scss");!function(e,t){t(function(){new class{constructor(){this.currentList="home",this.uploadType={imgs:""},this.loading=!1,this.hasMore=!0,this.isAndroid=navigator.userAgent.indexOf("Android")>-1||navigator.userAgent.indexOf("Adr")>-1,this.currentPage=1,this.api={LIST:"/api/media/list",WX_CONFIG:"/api/getConfig",UPLOAD:"/api/media/upload",MAKE_LOVE:"/api/media/love"},this.init()}async init(){await t.get("/api/getMode",e=>{if(0===e.ret){const n=e.data.mode;this.mode=n,1===n&&t("#filedata").attr("accept","image/*")}else this.showTost("网络出现故障")}),this.wxJssdk(),this.main(),this.renderBanner(),this.prefix(),this.waterfallsFlow(),this.previewPic(),this.handleLike(),this.showTip(),this.scrollLoadMore(),this.getList({page:1,patten:1,count:20},"home")}main(){t(".btn-upload").on("tap",e=>{e.preventDefault(),t("#filedata").trigger("click")}),t(".btn-home").on("tap",e=>{e.preventDefault(),window.location.href=window.location.href,this.page("home")}),t(".btn-rank").on("tap",e=>{e.preventDefault(),this.page("rank")}),t(window).on("resize",()=>{setInterval(function(){t("#masonry").masonry("reload")},100)}),t("#filedata").UploadImg({url:this.api.UPLOAD,width:"750",showTips:this.showTost,quality:"0.8",mixsize:3145728,videoSize:52428800,videoType:"video/ogg,video/mp4,video/WebM,video/quicktime,video/x-msvideo",type:"image/png,image/jpg,image/jpeg,image/pjpeg,image/gif,image/bmp,image/x-png",success:e=>{0===e.ret?(this.showTost("上传成功"),setTimeout(()=>{this.page("home")},500),this.currentList="home"):this.showTost(e.msg||"上传失败稍后重试")},error(e){}})}waterfallsFlow(){const e=t("#masonry");parseInt(window.screen.width),e.masonry({itemSelector:".item",gutterWidth:0,isResizable:!0})}page(e){const n=t("#page-"+e);n.addClass("active").siblings(".page").removeClass("active"),n.find(".preview").html(""),this.getList({page:1,count:"home"===e?20:10,patten:"home"===e?1:2},e)}showTip(){const e=t("#page-rules");t(".btn-rules").on("tap",t=>{t.preventDefault(),e.show(),setTimeout(function(){e.addClass("show")},50)}),t(".close").on("tap",n=>{e.removeClass("show").one("webkitTransitionEnd",function(){t(this).hide()})})}getList(e,n){const i=this.api.LIST,o=this,r=e;o.loading=!0,t.get(i,r,e=>{if(o.loading=!1,0===e.ret){const i=e.data.dataList;o.videoId=[],i.length<20&&(this.hasMore=!1),o.hasMore=20===i.length;const r=i.map(e=>1===e.mediaType?`<div class="item masonry-brick" data-id="${e.id}" data-src="${e.path}" data-love="${0===e.isVoted?1:2}">\n                <img src="${e.path}">\n                <div class="pick-info">\n                  <i class="type iconfont icon-tupianx"></i>\n                  <span class="btnLike">\n                    <i class="iconfont ${1===e.isVoted?"icon-dianzanedx":"icon-dianzanx"}"></i>\n                    <b>${e.voteNum}</b>\n                  </span>\n                </div>\n              </div>`:`<div class="item video masonry-brick" data-id="${e.id}" data-love="${0===e.isVoted?1:2}" data-videoPath="${e.path}">\n                <img src="${e.videoCover}">\n                <div class="pick-info">\n                  <i class="type iconfont icon-shipinx"></i>\n                  <span class="btnLike">\n                    <i class="iconfont ${1===e.isVoted?"icon-dianzanedx":"icon-dianzanx"}"></i>\n                    <b>${e.voteNum}</b>\n                  </span>\n                </div>\n              </div>`);t(`#page-${n}`).find(".preview").append(r.join("")),setInterval(function(){t("#masonry").masonry("reload")},100)}else o.showTost(e&&e.msg||"网络错误，请稍后重试")})}previewPic(){const e=this;t(".preview").on("tap",':not(".btnLike")',n=>{n.preventDefault();const i=t(n.target);if(i.hasClass("btnLike")||i.parents(".btnLike").length)return;const o=i.parents(".item");if(o.hasClass("video")){const t=o.attr("data-videoPath");return o.attr("videoPath"),e.playVidoeIOS(t,o.data("id")),!1}const r=[];return o.parents(".preview").find(".item").map((e,n)=>{const i=t(n).attr("data-src");return i&&r.push(i),i}),"undefined"!=typeof wx?(wx.previewImage({current:o.data("src")||o.attr("src"),urls:r}),!1):void 0})}wxJssdk(){const e=this.api.WX_CONFIG;/MicroMessenger/i.test(navigator.userAgent)&&t.getScript("https://res.wx.qq.com/open/js/jweixin-1.0.0.js",function(){t.get(e,{path:window.location.href.split("#")[0]},e=>{if(0===e.ret){const t=e.data;wx.config({debug:!1,appId:t.appId,timestamp:t.timestamp,nonceStr:t.nonceStr,signature:t.signature,jsApiList:["onMenuShareTimeline","onMenuShareAppMessage","hideMenuItems","previewImage"]}),wx.ready(function(){const e={title:"Photo moments",link:"http://photo-moments.yxking.xyz/mobile/index",desc:"这是分享的描述部分",imgUrl:"http://photo-moments.yxking.xyz/static/imgs/default_lecture.png",success:function(){},cancel:function(){}};wx.onMenuShareTimeline(e),wx.onMenuShareAppMessage(e),wx.hideMenuItems({menuList:["menuItem:share:qq","menuItem:share:weiboApp","menuItem:share:facebook","menuItem:share:QZone","menuItem:favorite","menuItem:copyUrl","menuItem:readMode","menuItem:openWithQQBrowser","menuItem:openWithSafari"]})}),wx.error(function(e){})}})})}handleLike(){const e=this,n=this.api.MAKE_LOVE;t(".preview").on("tap",".btnLike",function(i){const o=t(this).parents(".item"),r=1===o.closest(".page-rank").length;if(t("#hint"),o.hasClass("disabled"))return;const a=o.data("id"),s=parseInt(o.attr("data-love"));o.addClass("disabled"),t.post(n,{id:a,act:s},function(t){0===t.ret?(1===s?(o.find(".btnLike b").text(parseInt(o.find("b").text())+1),o.find(".btnLike i").addClass("icon-dianzanedx").removeClass("icon-dianzanx"),o.removeAttr("love"),o.attr("data-love",2),e.showTost("已点赞")):(o.find(".btnLike b").text(parseInt(o.find("b").text())-1),o.find(".btnLike i").removeClass("icon-dianzanedx").addClass("icon-dianzanx"),o.removeAttr("love"),o.attr("data-love",1),e.showTost("已取消点赞")),r&&this.page("rank")):e.showTost(t&&t.msg||"网络错误请稍后重试"),setTimeout(function(){o.removeClass("disabled")},300)},"json")})}playVidoeIOS(e,n,i){const o=t(".videoContainer");o.find("video").attr("src",e),o.find(".close-icon").show(),o.addClass("active");const r=t(".videoContainer video");t(".scroller"),r.on("playing",e=>{o.find(".close-icon").hide(),o.css("opacity",1)}),this.isAndroid?(r[0].play(),r[0].addEventListener("x5videoexitfullscreen",function(){o.find("video").replaceWith('\n          <video \n            id="j-video"\n            class="wrapper"\n            playsinline \n            webkit-playsinline\n            x-webkit-airplay="allow"\n            preload="auto"\n            x5-video-player-type="h5"\n            x5-video-player-fullscreen="true"\n          >\n            你的浏览器不支持H5播放器\n          </video>'),o.removeClass("active"),setInterval(function(){t("#masonry").masonry("reload")},100)})):r[0].addEventListener("webkitendfullscreen",function(){o.removeClass("active"),setInterval(function(){t("#masonry").masonry("reload")},100)}),setTimeout(()=>{r[0].play()},500),o.on("tap",e=>{const n=t(e.target);n.hasClass("videoContainer")?(e.preventDefault(),n.find("video")[0].pause(),o.removeClass("active")):(e.preventDefault(),e.target.pause(),o.removeClass("active"))})}prefix(){t(document).ready(function(e){t(window).on("orientationchange",function(e){if(t("body"),180!=window.orientation&&0!=window.orientation||t(".turnBox").remove(),90==window.orientation||-90==window.orientation){if(t(".videoContainer").hasClass("active"))return;t("body").append('<aside class="turnBox"><img src="/static/imgs/turn.png" class="turn"><p>请将手机调至竖屏状态，获得最佳浏览体验</p></aside>')}}),t(".container").on("touchmove",function(e){if(t(e.target).parents(".scroller").length||t(e.target).hasClass("scroller")){var n=t(e.target).hasClass("scroller")?t(e.target)[0]:t(e.target).parents(".scroller")[0];n.scrollHeight==n.offsetHeight&&e.preventDefault()}else e.preventDefault()}),t(".scroller").on("scroll",function(e){var n=t(e.target)[0];0==n.scrollTop?n.scrollTop=1:n.scrollTop==n.scrollHeight-n.offsetHeight&&(n.scrollTop=n.scrollTop-1)}).trigger("scroll")})}scrollLoadMore(){const e=this;t("#page-home").on("scroll",function(){const n=t(this),i=parseInt(n.find(".item:last").css("top"))+parseInt(n.find(".item:last").css("height"))-n.scrollTop();let o=e.currentPage;i<1800&&!e.loading&&e.hasMore&&(o+=1,e.currentPage=o,e.getList({page:o,count:20,patten:1},"home"))})}showTost(e){const n=t("#hint");n.text(e).show(),setTimeout(()=>{n.addClass("show-toast")},50),setTimeout(()=>{n.removeClass("show-toast").one("webkitTransitionEnd",function(){n.hide()})},1400)}renderBanner(){const e=[{imgUrl:"/static/imgs/test.png",id:1},{imgUrl:"/static/imgs/test.png",id:2},{imgUrl:"/static/imgs/test.png",id:3}].map(e=>`<li id="${e.id}" class="slider-item openParam" data-param="">\n          <div class="img-wrap">\n              <img class="banner-image" src="${e.imgUrl}">\n          </div>\n        </li>`);t("#banner").html(""),t("#banner").html(`<ul class="slider-list">${e.join("")}</ul>`),t("#banner").slider({autoScroll:!0,infinite:!0})}bannerList(e){return`<ul class="slider-list">${e.map(e=>`<li id="${e.id}" class="slider-item openParam" data-param="">\n          <div class="img-wrap">\n              <img class="banner-image" src="${e.imgPath}">\n          </div>\n        </li>`).join("")}</ul>`}}})}(window,$)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,