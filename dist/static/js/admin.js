!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!k[e]||!y[e])return;for(var n in y[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(h[n]=t[n]);0==--m&&0===v&&D()}(e,n),t&&t(e,n)};var n,o=!0,a="5a6edb340d795969cd9a",i=1e4,s={},r=[],c=[];function d(e){var t=O[e];if(!t)return P;var o=function(o){return t.hot.active?(O[o]?-1===O[o].parents.indexOf(e)&&O[o].parents.push(e):(r=[e],n=o),-1===t.children.indexOf(o)&&t.children.push(o)):(console.warn("[HMR] unexpected require("+o+") from disposed module "+e),r=[]),P(o)},a=function(e){return{configurable:!0,enumerable:!0,get:function(){return P[e]},set:function(t){P[e]=t}}};for(var i in P)Object.prototype.hasOwnProperty.call(P,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(o,i,a(i));return o.e=function(e){return"ready"===p&&u("prepare"),v++,P.e(e).then(t,function(e){throw t(),e});function t(){v--,"prepare"===p&&(w[e]||C(e),0===v&&0===m&&D())}},o.t=function(e,t){return 1&t&&(e=o(e)),P.t(e,-2&t)},o}var l=[],p="idle";function u(e){p=e;for(var t=0;t<l.length;t++)l[t].call(null,e)}var f,h,g,m=0,v=0,w={},y={},k={};function b(e){return+e+""===e?+e:e}function x(e){if("idle"!==p)throw new Error("check() is only allowed in idle status");return o=e,u("check"),function(e){return e=e||1e4,new Promise(function(t,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var o=new XMLHttpRequest,i=P.p+""+a+".hot-update.json";o.open("GET",i,!0),o.timeout=e,o.send(null)}catch(e){return n(e)}o.onreadystatechange=function(){if(4===o.readyState)if(0===o.status)n(new Error("Manifest request to "+i+" timed out."));else if(404===o.status)t();else if(200!==o.status&&304!==o.status)n(new Error("Manifest request to "+i+" failed."));else{try{var e=JSON.parse(o.responseText)}catch(e){return void n(e)}t(e)}}})}(i).then(function(e){if(!e)return u("idle"),null;y={},w={},k=e.c,g=e.h,u("prepare");var t=new Promise(function(e,t){f={resolve:e,reject:t}});h={};return C(1),"prepare"===p&&0===v&&0===m&&D(),t})}function C(e){k[e]?(y[e]=!0,m++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=P.p+""+e+"."+a+".hot-update.js",t.appendChild(n)}(e)):w[e]=!0}function D(){u("ready");var e=f;if(f=null,e)if(o)Promise.resolve().then(function(){return j(o)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in h)Object.prototype.hasOwnProperty.call(h,n)&&t.push(b(n));e.resolve(t)}}function j(t){if("ready"!==p)throw new Error("apply() is only allowed in ready status");var n,o,i,c,d;function l(e){for(var t=[e],n={},o=t.slice().map(function(e){return{chain:[e],id:e}});o.length>0;){var a=o.pop(),i=a.id,s=a.chain;if((c=O[i])&&!c.hot._selfAccepted){if(c.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:i};if(c.hot._main)return{type:"unaccepted",chain:s,moduleId:i};for(var r=0;r<c.parents.length;r++){var d=c.parents[r],l=O[d];if(l){if(l.hot._declinedDependencies[i])return{type:"declined",chain:s.concat([d]),moduleId:i,parentId:d};-1===t.indexOf(d)&&(l.hot._acceptedDependencies[i]?(n[d]||(n[d]=[]),f(n[d],[i])):(delete n[d],t.push(d),o.push({chain:s.concat([d]),id:d})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function f(e,t){for(var n=0;n<t.length;n++){var o=t[n];-1===e.indexOf(o)&&e.push(o)}}t=t||{};var m={},v=[],w={},y=function(){console.warn("[HMR] unexpected require("+C.moduleId+") to disposed module")};for(var x in h)if(Object.prototype.hasOwnProperty.call(h,x)){var C;d=b(x);var D=!1,j=!1,$=!1,E="";switch((C=h[x]?l(d):{type:"disposed",moduleId:x}).chain&&(E="\nUpdate propagation: "+C.chain.join(" -> ")),C.type){case"self-declined":t.onDeclined&&t.onDeclined(C),t.ignoreDeclined||(D=new Error("Aborted because of self decline: "+C.moduleId+E));break;case"declined":t.onDeclined&&t.onDeclined(C),t.ignoreDeclined||(D=new Error("Aborted because of declined dependency: "+C.moduleId+" in "+C.parentId+E));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(C),t.ignoreUnaccepted||(D=new Error("Aborted because "+d+" is not accepted"+E));break;case"accepted":t.onAccepted&&t.onAccepted(C),j=!0;break;case"disposed":t.onDisposed&&t.onDisposed(C),$=!0;break;default:throw new Error("Unexception type "+C.type)}if(D)return u("abort"),Promise.reject(D);if(j)for(d in w[d]=h[d],f(v,C.outdatedModules),C.outdatedDependencies)Object.prototype.hasOwnProperty.call(C.outdatedDependencies,d)&&(m[d]||(m[d]=[]),f(m[d],C.outdatedDependencies[d]));$&&(f(v,[C.moduleId]),w[d]=y)}var I,S=[];for(o=0;o<v.length;o++)d=v[o],O[d]&&O[d].hot._selfAccepted&&S.push({module:d,errorHandler:O[d].hot._selfAccepted});u("dispose"),Object.keys(k).forEach(function(e){!1===k[e]&&function(e){delete installedChunks[e]}(e)});for(var _,H,T=v.slice();T.length>0;)if(d=T.pop(),c=O[d]){var A={},L=c.hot._disposeHandlers;for(i=0;i<L.length;i++)(n=L[i])(A);for(s[d]=A,c.hot.active=!1,delete O[d],delete m[d],i=0;i<c.children.length;i++){var M=O[c.children[i]];M&&((I=M.parents.indexOf(d))>=0&&M.parents.splice(I,1))}}for(d in m)if(Object.prototype.hasOwnProperty.call(m,d)&&(c=O[d]))for(H=m[d],i=0;i<H.length;i++)_=H[i],(I=c.children.indexOf(_))>=0&&c.children.splice(I,1);for(d in u("apply"),a=g,w)Object.prototype.hasOwnProperty.call(w,d)&&(e[d]=w[d]);var U=null;for(d in m)if(Object.prototype.hasOwnProperty.call(m,d)&&(c=O[d])){H=m[d];var q=[];for(o=0;o<H.length;o++)if(_=H[o],n=c.hot._acceptedDependencies[_]){if(-1!==q.indexOf(n))continue;q.push(n)}for(o=0;o<q.length;o++){n=q[o];try{n(H)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:d,dependencyId:H[o],error:e}),t.ignoreErrored||U||(U=e)}}}for(o=0;o<S.length;o++){var R=S[o];d=R.module,r=[d];try{P(d)}catch(e){if("function"==typeof R.errorHandler)try{R.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:d,error:n,originalError:e}),t.ignoreErrored||U||(U=n),U||(U=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:d,error:e}),t.ignoreErrored||U||(U=e)}}return U?(u("fail"),Promise.reject(U)):(u("idle"),new Promise(function(e){e(v)}))}var O={};function P(t){if(O[t])return O[t].exports;var o=O[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var o=0;o<e.length;o++)t._acceptedDependencies[e[o]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:x,apply:j,status:function(e){if(!e)return p;l.push(e)},addStatusHandler:function(e){l.push(e)},removeStatusHandler:function(e){var t=l.indexOf(e);t>=0&&l.splice(t,1)},data:s[e]};return n=void 0,t}(t),parents:(c=r,r=[],c),children:[]};return e[t].call(o.exports,o,o.exports,d(t)),o.l=!0,o.exports}P.m=e,P.c=O,P.d=function(e,t,n){P.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},P.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},P.t=function(e,t){if(1&t&&(e=P(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(P.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)P.d(n,o,function(t){return e[t]}.bind(null,o));return n},P.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return P.d(t,"a",t),t},P.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},P.p="",P.h=function(){return a},d("./src/js/admin.js")(P.s="./src/js/admin.js")}({"./src/css/admin.scss":function(e,t){},"./src/js/admin.js":function(e,t,n){"use strict";n.r(t);n("./src/css/admin.scss");const o={open(e){$("body").css("overflow","hidden").append(`<div id="dialog" class="dialog-mask">\n        <div class="content-layout">\n          <div class="dialog-title">${e.title}</div>\n          <div class="dialog-content"  style="width:${e.contentArea[0]||"400px"}; height:${e.contentArea[1]||"auto"}; overflow: auto">\n            ${e.contentText}\n          </div>\n          <div class="dialog-footer">\n            <button class="dialog-cancel">${e.cancelText||"取消"}</button>\n            <button class="dialog-ok">${e.okText||"确定"}</button>\n          </div>\n        </div>\n      </div>`),this.onClick(e)},onClick(e){$("#dialog").on("click",t=>{const n=$(t.target);n.hasClass("dialog-ok")?this.onOk(e):n.hasClass("dialog-cancel")?this.onCancel(e):n.hasClass("dialog-mask")&&e.maskClose&&this.close()})},onOk(e){e.onOk&&e.onOk()},onCancel(e){e.onCancel&&e.onCancel(),$("body").css("overflow","auto").find("#dialog").remove()},close(){console.log("close"),$("body").css("overflow","auto").find("#dialog").remove()}},a={success(e){$("body").append(`<div class="toast toast-success"><p>${e}</p></div>`),$(".toast").addClass("toast-animate"),setTimeout(()=>{$(".toast").remove()},1e3)},error(e){$("body").append(`<div class="toast toast-error"><p>${e}</p></div>`),$(".toast").addClass("toast-animate"),setTimeout(()=>{$(".toast").remove()},1e3)},warning(e){$("body").append(`<div class="toast toast-warning"><p>${e}</p></div>`),$(".toast").addClass("toast-animate"),setTimeout(()=>{$(".toast").remove()},1e3)}};!function(e,t){t(function(){new class{constructor(){this.currentPage=1,this.totalCount=null,this.isList=1===t("#listPage").length,this.config={},this.corpId=window.location.pathname.split("/")[2],this.init()}async init(){await t.get("/admin/api/getConfig",e=>{0===e.ret?(e.data.mode,this.config=e.data,this.handleDataBackFill(e.data)):a.error("网络错误，获取业务模式失败")}),console.log("init"),this.bindEvents(),this.previePic(),this.modeSeting(),this.slideEvents(),this.uploadImage(),this.isList?(this.getList(),this.deleteItem(),this.changeLikeCount(),this.downLoadSources()):this.wangEditor()}bindEvents(){t(".j-handle-event").click(e=>{const n=t(e.target).closest(".nav-item"),o=n.find("ul.options");o.hasClass("show")?o.slideUp().removeClass("show"):(n.siblings().find("ul.options").slideUp().removeClass("show"),o.slideDown().addClass("show"))})}getList(e={}){const n=this,o=/.(jpg|jpeg|png|gif|x-png|bmp|pjpeg)/,i=t(".content ul"),s={page:1,count:20,patten:1,...e};t.get("/admin/api/media/list",s,e=>{if(0===e.ret){const t=e.data.dataList;n.totalCount=e.data.totalCount,n.currentPage=s.page;const a=t.map(e=>o.test(e.path)?`\n              <li class="item" data-id="${e.id}">\n                <div class="img">\n                  <img src="${e.path}" alt="">\n                </div>\n                <div class="info">\n                  <p><span>类型：</span><span>图片</span></p>\n                  <p><span>上传时间：</span><span>2018-20-30</span></p>\n                  <p><span>点赞数：</span><span class="like-count">20</span><a class="j-change-like">修改</a></p>\n                  <p class="handle">\n                    <a class="j-down down">下载</a>\n                    <a class="delete">删除</a>\n                  </p>\n                </div>\n              </li>`:`<li class="item" data-id="${e.id}">\n                <div class="img">\n                  <video \n                    x5-video-player-type="h5"\n                    x5-video-player-fullscreen="true"\n                    controls src="${e.path}"></video>\n                </div>\n                <div class="info">\n                  <p><span>类型：</span><span>视频</span></p>\n                  <p><span>上传时间：</span><span>2018-20-30</span></p>\n                  <p><span>点赞数：</span><span class="like-count">20</span><a class="j-change-like">修改</a></p>\n                  <p class="handle">\n                    <a class="j-down down">下载</a>\n                    <a class="delete">删除</a>\n                  </p>\n                </div>\n              </li>`);i.html(a.join("")),window.scrollTo(0,0),n.pagination({current:n.currentPage,totalData:n.totalCount})}else a.error(e.msg||"网络错误，稍后重试")})}pagination(e){const n=this;t(".paginate").pagination({showData:20,current:e.current,totalData:e.totalData,jump:!0,isHide:!0,coping:!0,homePage:"首页",endPage:"末页",prevContent:"上页",nextContent:"下页",callback:function(e){const t={page:e.getCurrent(),count:20,patten:1};n.getList(t)}})}deleteItem(){const e=this;t(".content").on("click",".delete",n=>{const i=t(n.target).closest(".item").data("id");o.open({contentArea:["280px"],title:"确认删除",contentText:"确认要删除该项吗？",maskClose:1,onOk(){t.post(`/admin/api/media/${i}/delete`,t=>{if(0===t.ret){const t={count:20,page:this.currentPage,patten:1};e.getList(t),o.close(),a.success("删除成功")}else a.error(t&&t.msg||"网络错误，稍后重试")})},onCancel(){}})})}previePic(){t(".content").on("click","img",e=>{const n=t(e.target).attr("src");t("body").append(`<div class="mask">\n        <img src="${n}"/>\n        </div>`)}),t("body").on("click",".mask",function(){t(this).remove()})}modeSeting(){const e=this;t(".modle-seting ul.options").on("click",".j-mode-item",n=>{const i=t(n.target).closest("li"),s=i.data("mode"),r=i.text();s!==e.config.mode&&o.open({title:"确认修改模式",contentArea:["280px"],maskClose:!0,contentText:`确认将模式修改为【${r}】模式?`,onOk(){t.post("/admin/api/updateConfig",{...e.config,mode:s},t=>{0===t.ret?(o.close(),i.find("a").addClass("active"),i.siblings().find("a").removeClass("active"),e.config.mode=s,a.success("模式修改成功"),e.getList()):a.error(t.msg||"网络错误，请稍后重试")})},onCancel(){i.closest("ul.options").slideToggle(),i.closest("ul.options").toggleClass("show")}})})}slideEvents(){const e=t(".photo-slide"),n=t(".photo-slide .level-2 li");e.on("click",".level-2 li a",e=>{const o=t(e.target).closest("li");n.removeClass("active"),o.addClass("active");const a=o.data("page");t(`.set-${a}`).show().siblings(".set-page").hide()})}uploadImage(){t(".btn-upload").on("click",e=>{e.preventDefault();try{t(e.target).closest("form"),"watermarkForm"===currentPage?t("#filedata").attr("multiple",!0).trigger("click"):t("#filedata").trigger("click")}catch(e){t("#filedata").trigger("click")}})}downLoadSources(){t(".content").on("click",".j-down",e=>{!function(e,t){var n=new Image;n.setAttribute("crossOrigin","anonymous"),n.onload=function(){var e=document.createElement("canvas");e.width=n.width,e.height=n.height,e.getContext("2d").drawImage(n,0,0,n.width,n.height);var o=e.toDataURL("image/png"),a=document.createElement("a"),i=new MouseEvent("click");a.download=t||"下载图片名称",a.href=o,a.dispatchEvent(i)},n.src=e}(t(e.target).closest(".item").find("img").attr("src"),"test.png")})}wangEditor(){const t=e.wangEditor;this.editor=new t("#editor"),this.editor.customConfig={menus:["image"],uploadImgServer:"/admin/api/uploadPicture",uploadImgMaxSize:3145728,uploadImgHooks:{success:function(e,t,n){},fail:(e,t,n)=>(console.log("sadasdf"),!1),error:(e,t)=>(console.log("sadasdf"),!1),linkImgCallback:e=>{}}},this.editor.create(),this.editor.txt.html(this.config.accountDesc)}changeLikeCount(){const e=this;t(".list-container").on("click",".j-change-like",n=>{const i=t(n.target).closest(".item"),s=i.data("id");o.open({contentArea:["280px"],title:"修改点赞数",contentText:'<input type="number" name="likeCount" class="form-control">',maskClose:!1,onOk(){const n=t('input[name="likeCount"]').val().trim();n?+n?(console.log(s),t.post("/admin/api/modifyVoteNum",{mediaId:s,corpId:e.corpId,count:parseInt(n)},e=>{0===e.ret?(a.success("修改成功"),i.find(".like-count").text(n),o.close()):a.error(e&&e.msg||"网络错误，稍后重试")})):a.warning("点赞数应该为数字"):a.warning("点赞数量不能为空")},onCancel(){}})})}handleSystemConfig(){t("j-save-config").click(e=>{const n=t(e.target).closest(".set-page"),o=n.data("pageId"),i={};i=1===o?{...i,wxShareDesc:n.find('name="wxShareDesc"').val().trim(),wxShareTitle:n.find('name="wxShareTitle"').val().trim(),wxSharePic:self.config.wxSharePic}:2===o?{...i,enableWatermark:parseInt(n.find('input[type="radio]:checked').val()),watermarkPic:self.config.watermarkPic}:{...i,accountDesc:self.config.accountDesc,banners:self.config.banners},i={...self.config,...i},console.log(i),t.post("/admin/api/updateConfig",i,e=>{console.log(e),0===e.ret?a.success("更新成功"):a.error(e.msg||"网络错无情稍后重试")})})}handleDataBackFill(e){if(e.mode?t(`.options li[data-mode="${e.mode}"]`).find("a").addClass("active"):t('.options li[data-mode="1"]').find("a").addClass("active"),e.wxShareDesc&&t('input[name="wxShareDesc"]').val(e.wxShareDesc),e.wxShareTitle&&t('input[name="wxShareTitle"]').val(e.wxShareTitle),console.log(t(`input[value="${e.enableWatermark}"]`)),e.enableWatermark&&t(`input[value="${e.enableWatermark}"]`).prop("checked",!0),e.wxShareDesc&&t('textarea[name="wxShareDesc"]').val(e.wxShareDesc),e.wxSharePic&&t(".set-wx_share .shareImg").html(`<img src="${e.wxSharePic}"/>`),e.banners){const n=e.banners.map(e=>`<img src="${e}/>`);t(".set-account .banners").html(n.join(""))}e.watermarkPic&&t(".set-watermark .waterMarkImg").html(`<img src="${e.watermarkPic}/>`),e.accountDesc&&this.editor&&this.editor.txt.html(e.accountDesc)}}})}(window,$)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,